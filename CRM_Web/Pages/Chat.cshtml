    @page
    @model CRM_Web.Pages.Chat.IndexModel
    @{
        ViewData["Title"] = "Chat";
    }

    <style>
        html, body {
            height: 100%;
            overflow: hidden;
        }

    #chatMessages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 1rem;
        min-height: 0;
        background-color: #f5f6fa;
    }

    .chat-bubble {
        max-width: 75%;
        padding: 0.75rem 1rem;
        border-radius: 1rem;
        word-break: break-word;
        white-space: pre-wrap;
        font-size: 0.95rem;
        overflow-wrap: break-word;
        background-color: #ffffff;
        color: black;
    }

        .chat-bubble.sent {
            background-color: #0d6efd;
            color: white;
        }

    .chat-meta {
        font-size: 0.7rem;
        color: #888;
        margin-top: 4px;
    }

        .chat-meta.left {
            text-align: left;
        }

        .chat-meta.right {
            text-align: right;
        }

    </style>

    <div class="row flex-nowrap" style="height: calc(100vh - 60px); margin: 0;">
        <!-- Chat List -->
        <div class="col-3 border-end bg-white p-3 overflow-auto">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="mb-0">Chats</h5>
                <button class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#newChatModal">
                    + New
                </button>
            </div>

            <!-- New Chat Modal -->
            <div class="modal fade" id="newChatModal" tabindex="-1" aria-labelledby="newChatModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="newChatModalLabel">Start New Chat</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <input type="text" id="contactSearch" class="form-control mb-2" placeholder="Search name or phone..." oninput="filterContacts()" />

                            <div style="max-height: 300px; overflow-y: auto;">
                                <ul id="contactList" class="list-group mb-2">
                                    @foreach (var contact in Model.AllContacts)
                                    {
                                        <li class="list-group-item list-group-item-action" onclick="selectContact('@contact.Phone')">
                                            <strong>@contact.Name</strong><br />
                                            <small>@contact.Phone</small>
                                        </li>
                                    }
                                </ul>
                            </div>

                            <div id="newContactOption" class="text-muted small d-none">
                                No match found. <a href="#" onclick="startNewChatFromInput()">Start new chat with this number</a>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" onclick="startNewChatFromInput()">Start</button>
                        </div>
                    </div>
                </div>
            </div>

            <ul class="list-group">
                @foreach (var phone in Model.RecentPhones)
                {
                    <a href="?phone=@phone" class="list-group-item list-group-item-action @(Model.SelectedPhone == phone ? "active" : "")">
                        @phone
                    </a>
                }
            </ul>
        </div>

        <!-- Chat Messages -->
        <div class="col-6 d-flex flex-column bg-light p-0" style="height: calc(100vh - 60px);">
            <div id="chatMessages">
                @foreach (var msg in Model.Messages)
                {
                    <div class="mb-2 text-@(msg.IsSender.GetValueOrDefault() ? "end" : "start")">
                        <div class="d-inline-block p-2 rounded @(msg.IsSender.GetValueOrDefault() ? "bg-primary text-white" : "bg-white border")">
                            @msg.MessageText
                        </div>
                        <div class="text-muted small">@msg.CreatedDate?.ToLocalTime().ToString("g")</div>
                    </div>
                }
            </div>

            <div id="chatInputBar" class="d-flex border-top px-3 py-2"
                 style="position: sticky; bottom: 0; background-color: #f8f9fa; z-index: 10;">
                <textarea id="chatInput" class="form-control me-2"
                          rows="1"
                          placeholder="Type a message..."
                          style="resize: none; max-height: 150px; overflow-y: auto;"></textarea>

                <button id="sendButton" class="btn btn-primary">Send</button>
            </div>
        </div>

        <!-- Contact Info -->
        <div class="col-3 border-start bg-white p-3">
            <h6>Contact Info</h6>
            @if (!string.IsNullOrEmpty(Model.SelectedPhone))
            {
                <div class="mb-3"><strong>Phone:</strong> <div>@Model.SelectedPhone</div></div>
                <div class="mb-3"><strong>Name:</strong> <div><!-- Add name if needed --></div></div>
                <div class="d-grid gap-2">
                    <button class="btn btn-outline-secondary">📝 Add Note</button>
                    <button class="btn btn-outline-success">💼 Create Deal</button>
                </div>
            }
            else
            {
                <div class="text-muted">Select a chat to see contact details.</div>
            }
        </div>
    </div>


    @section Scripts {
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

        <script>
            const shownMessageIds = new Set();

            const selectedPhone = "@Model.SelectedPhone";
            const chatInput = document.getElementById("chatInput");
            const sendButton = document.getElementById("sendButton");
            const messageContainer = document.getElementById("chatMessages");

            function adjustBottomPadding() {
                const inputBar = document.getElementById("chatInputBar");
                const chatMessages = document.getElementById("chatMessages");

                if (inputBar && chatMessages) {
                    const inputHeight = inputBar.offsetHeight;
                    const safePadding = inputHeight - 8; // remove a little margin to keep it tight, but visible
                    chatMessages.style.paddingBottom = `${safePadding}px`;
                }
            }


            async function selectContact(phone) {
                const normalizedPhone = phone.startsWith("+") ? phone : "+" + phone;
                await connection.invoke("JoinGroup", normalizedPhone.trim());
                console.log("✅ Joined group before redirecting:", normalizedPhone);
                window.location.href = `/Chat?phone=${encodeURIComponent(normalizedPhone)}`;
            }



            function scrollToBottom() {
                adjustBottomPadding();
                setTimeout(() => {
                    messageContainer.scrollTop = messageContainer.scrollHeight;
                }, 0); // ensure DOM updates before scroll
            }
            window.addEventListener("load", adjustBottomPadding);

            chatInput.addEventListener("keydown", function (event) {
                if (event.key === "Enter" && !event.shiftKey) {
                    event.preventDefault(); // Prevent new line
                    sendButton.click();     // Trigger the send button click
                }
            });

            chatInput.addEventListener("input", function () {
                this.style.height = "auto";
                this.style.height = this.scrollHeight + "px";
                adjustBottomPadding();
            });

            window.addEventListener("resize", adjustBottomPadding);

                sendButton.addEventListener("click", async () => {
                    const message = chatInput.value.trim();
                    if (!message) return;

                    const dto = {
                        contactPhone: selectedPhone.replace(/&#x2B;|&#43;/g, "+"),
                        messageText: message,
                        messageType: "text"
                    };

                    try {
                        const res = await fetch("https://localhost:44309/api/chat/send", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            credentials: "include",
                            body: JSON.stringify(dto)
                        });

                        if (res.ok) {
                            chatInput.value = "";
                            scrollToBottom();
                        } else {
                            alert("Failed to send message.");
                        }
                    } catch (err) {
                        console.error("Send error:", err);
                    }
                });


            async function loadMessages() {
                try {
                    const normalizedPhone = selectedPhone.startsWith("+") ? selectedPhone : "+" + selectedPhone;
                    const res = await fetch(`/Chat?handler=Messages&phone=${encodeURIComponent(normalizedPhone)}`);
                    const messages = await res.json();

                    messageContainer.innerHTML = "";

                    messages.forEach(msg => {
                        appendMessage(msg.messageText, msg.isSender, msg.createdDate);
                    });

                    scrollToBottom();

                } catch (err) {
                    console.error("Load error:", err);
                }
            }

            let lastSender = null;

            function appendMessage(messageText, isSender, createdDate) {
                const wrapper = document.createElement("div");
                wrapper.className = "mb-2 d-flex flex-column";
                wrapper.style.alignItems = isSender ? "flex-end" : "flex-start";

                const bubble = document.createElement("div");
                bubble.className = "chat-bubble";
                if (isSender) bubble.classList.add("sent");
                bubble.innerHTML = messageText.replace(/\n/g, "<br>");

                const time = document.createElement("div");
                time.className = "chat-meta " + (isSender ? "right" : "left");
                time.textContent = new Date(createdDate).toLocaleTimeString([], {
                    hour: "2-digit",
                    minute: "2-digit",
                });

                wrapper.appendChild(bubble);
                wrapper.appendChild(time);
                messageContainer.appendChild(wrapper);
            }





                    let connection; // declared globally
                    let hasSignalRStarted = false;

                    async function startSignalR() {
                        if (connection && connection.state === "Connected") {
                            console.log("🔁 Disposing existing SignalR connection...");
                            await connection.stop(); // 🔥 Dispose old connection
                        }

                        connection = new signalR.HubConnectionBuilder()
                            .withUrl("https://localhost:44309/chathub", {
                                withCredentials: true
                            })
                            .build();

                        connection.off("ReceiveMessage"); // remove leftover handler

                        connection.on("ReceiveMessage", (msg) => {
                            console.log("📥 Real-time message received (RAW):", msg);

                            try {
                                if (typeof msg === "string") msg = JSON.parse(msg);
                                if (!msg.messageText || !msg.messageId) return;

                                // ✅ Skip duplicate messages by ID
                                if (shownMessageIds.has(msg.messageId)) return;
                                shownMessageIds.add(msg.messageId);

                                appendMessage(msg.messageText, msg.isSender, msg.createdDate);
                                scrollToBottom();
                            } catch (err) {
                                console.error("❌ Error in ReceiveMessage:", err, msg);
                            }
                        });





                        try {
                            await connection.start();
                            console.log("✅ SignalR connected");

                            const rawPhone = "@Html.Raw(Model.SelectedPhone)";
                            const decodedPhone = decodeURIComponent(rawPhone).replace(/&#x2B;|&#43;/g, "+").trim();
                            console.log("👥 Joining SignalR group:", decodedPhone);
                            await connection.invoke("JoinGroup", decodedPhone);
                        } catch (err) {
                            console.error("❌ SignalR connection error:", err);
                        }
                    }




            // Init
            window.addEventListener("load", async () => {
                await startSignalR();        // ✅ Handles connection + group join
                await loadMessages();        // ✅ Pulls missed messages
                adjustBottomPadding();       // ✅ Adjust layout
            });


            function filterContacts() {
                const input = document.getElementById("contactSearch").value.trim().toLowerCase();
                const list = document.getElementById("contactList");
                const items = list.querySelectorAll("li");

                let matchFound = false;

                items.forEach(item => {
                    const text = item.textContent.toLowerCase();
                    const visible = text.includes(input);
                    item.style.display = visible ? "block" : "none";
                    if (visible) matchFound = true;
                });

                document.getElementById("newContactOption").classList.toggle("d-none", matchFound || input === "");
            }

            function selectContact(phone) {
                window.location.href = `/Chat?phone=${encodeURIComponent(phone)}`;
            }

            function startNewChatFromInput() {
                const input = document.getElementById("contactSearch").value.trim();
                if (!input) return;
                const normalized = input.startsWith("+") ? input : "+" + input;
                window.location.href = `/Chat?phone=${encodeURIComponent(normalized)}`;
            }

        

        </script>
    }

