@page
@model CRM_Web.Pages.Chat.IndexModel
@attribute [IgnoreAntiforgeryToken]
@{
    ViewData["Title"] = "Chat";
}
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

<style>
    /* Reset and Base Styles */
    html, body {
        height: 100%;
        overflow: hidden; /* Control overall page overflow */
        font-family: 'Poppins', sans-serif;
    }

    body {
        background-color: #F8FAFC; /* Lighter background for the entire page */
    }

    /* CSS Variables for Colors (Updated to Blue Theme) */
    :root {
        --primary-color: #4F46E5; /* A vibrant Indigo for primary elements */
        --primary-color-rgb: 79, 70, 229; /* RGB components for rgba() */
        --primary-darker-color: #3B33C9; /* A slightly darker Indigo for hover states */
        --secondary-color: #E0E7FF; /* A light Indigo for secondary elements and backgrounds */
        --text-dark: #1F2937; /* Darker text for better contrast */
        --text-medium: #4B5563; /* Medium gray for secondary text */
        --card-bg: #ffffff;
        --card-shadow: rgba(0,0,0,0.08);
        --border-radius-lg: 1.25rem; /* More rounded corners */
        --border-radius-md: 0.75rem;
    }

    /* Main Container for Chat */
    .chat-container {
        height: calc(100vh - 60px); /* Adjust for topbar height from _Layout */
        display: flex;
        flex-direction: row;
        margin: 0;
        min-height: 0;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05); /* Subtle overall shadow */
        border-radius: 12px;
        overflow: hidden; /* Ensure rounded corners work */
    }

    /* Left Panel (Chat List) */
    .chat-list-panel {
        flex: 0 0 460px;Fixed width for chat list */
        background-color: #FFFFFF;
        border-right: 1px solid #E2E8F0; /* Softer border */
        padding: 1.5rem;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
    }

    .chat-list-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 10px; /* Add padding below header */
        border-bottom: 1px solid #E2E8F0;
    }

        .chat-list-header h5 {
            font-weight: 600;
            color: #333;
        }

    .chat-list-panel .btn-outline-primary {
        border-radius: 8px;
        padding: 0.4rem 0.9rem;
        font-size: 0.9rem;
        color: var(--primary-color); /* Changed from #4CAF50 */
        border-color: var(--primary-color); /* Changed from #4CAF50 */
        transition: all 0.2s ease;
    }

        .chat-list-panel .btn-outline-primary:hover {
            background-color: var(--primary-color); /* Changed from #4CAF50 */
            color: white;
        }

    .sidebar-list {
        list-style: none;
        padding: 0;
        margin: 0;
        flex-grow: 1; /* Ensures it expands to fill available space */
        flex-basis: 0; /* Crucial for scrollable flex items to correctly calculate their size */
        overflow-y: auto; /* Ensures the list itself scrolls if its content overflows */
    }

        .sidebar-list .list-group-item {
            background-color: #FFFFFF;
            border: none;
            border-radius: 10px;
            margin-bottom: 8px;
            transition: background-color 0.2s ease, transform 0.1s ease;
            padding: 1rem 1.25rem;
            display: flex;
            flex-direction: column;
            justify-content: center; /* Vertically center content */
            box-shadow: 0 2px 5px rgba(0,0,0,0.03); /* subtle shadow for each item */
        }

            .sidebar-list .list-group-item:hover {
                background-color: #F0F4F8; /* Light hover effect */
                transform: translateY(-2px); /* Slight lift on hover */
            }

            .sidebar-list .list-group-item.active {
                background-color: var(--secondary-color) !important; /* Changed from #E6F3E6 */
                border-left: 4px solid var(--primary-color) !important; /* Changed from #4CAF50 */
                border-radius: 10px 0 0 10px;
                color: #333 !important;
                font-weight: 600;
                box-shadow: 0 4px 8px rgba(0,0,0,0.08); /* More pronounced shadow for active */
            }

                .sidebar-list .list-group-item.active strong,
                .sidebar-list .list-group-item.active small,
                .sidebar-list .list-group-item.active div {
                    color: #333 !important; /* Ensure text is dark in active state */
                }

        .sidebar-list .text-truncate {
            max-width: 90%; /* Adjust for badge */
        }

        .sidebar-list .badge {
            background-color: #F44336; /* Red for unread count (kept red as it's an alert color) */
            font-size: 0.75rem;
            padding: 0.3em 0.6em;
            border-radius: 10px;
        }

        .sidebar-list .text-muted {
            color: #777 !important; /* Consistent muted color */
        }

    .day-group-label {
        background-color: var(--secondary-color); /* Kept as light blue/lavender from previous suggestion */
        color: #555;
        font-size: 0.7rem;
        padding: 0.3rem 1rem;
        border-radius: 15px;
        margin: 1rem auto; /* Center the label */
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        pointer-events: auto;
        display: inline-block; /* Allow proper centering */
    }

    /* Chat Panel (Middle) */
    .chat-panel {
        flex: 1 1 auto;
        display: flex;
        flex-direction: column;
        background-color: #F5F6FA; /* Lightest gray for chat background */
        min-height: 0;
        position: relative;
    }

    #chatMessages {
        flex: 1 1 auto;
        overflow-y: auto;
        padding: 1.5rem; /* More padding */
        min-height: 0;
        background-color: #F5F6FA;
        scroll-behavior: smooth; /* Smooth scrolling for new messages */
    }

        #chatMessages.loading::before {
            content: "Loading messages..."; /* More user-friendly message */
            font-size: 0.9rem;
            color: #AAA;
            display: block;
            text-align: center;
            padding: 1rem;
        }

    #floatingDate {
        position: sticky;
        top: 0;
        z-index: 30;
        background-color: #DDE2EC; /* Slightly darker than chat background */
        padding: 0.5rem 1rem;
        text-align: center;
        font-size: 0.8rem;
        color: #555;
        border-radius: 1rem;
        margin: 0.5rem auto; /* Center the date */
        box-shadow: 0 2px 4px rgba(0,0,0,0.08);
        max-width: fit-content; /* Make it fit content */
    }

    .chat-bubble {
        max-width: 70%; /* Slightly less wide */
        padding: 0.9rem 1.2rem; /* More generous padding */
        border-radius: 20px; /* More rounded corners */
        word-break: break-word;
        white-space: pre-wrap;
        font-size: 0.9rem;
        line-height: 1.4;
        overflow-wrap: break-word;
        box-shadow: 0 2px 6px rgba(0,0,0,0.08); /* Subtle shadow for bubbles */
    }

        .chat-bubble.received {
            background-color: #FFFFFF; /* White for received messages */
            color: #333;
            border-bottom-left-radius: 6px; /* "Tail" effect */
        }

        .chat-bubble.sent {
            background-color: var(--primary-color); /* Changed from #4CAF50 */
            color: white;
            border-bottom-right-radius: 6px; /* "Tail" effect */
        }

    .chat-meta {
        font-size: 0.65rem; /* Smaller metadata */
        color: #999; /* Lighter gray for metadata */
        margin-top: 5px;
        opacity: 0.8; /* Slightly transparent */
    }

        .chat-meta.left {
            text-align: left;
        }

        .chat-meta.right {
            text-align: right;
        }

    .day-wrapper {
        display: flex;
        justify-content: center;
        margin: 1.5rem 0; /* More spacing between days */
        pointer-events: none;
    }

    /* Message Input Bar */
    #chatInputBar {
        background-color: #FFFFFF;
        border-top: 1px solid #E2E8F0;
        padding: 1rem 1.5rem; /* More padding */
        position: sticky;
        bottom: 0;
        z-index: 10;
        box-shadow: 0 -4px 10px rgba(0,0,0,0.03); /* Top shadow */
    }

    #chatInput {
        border-radius: 25px; /* Rounded input field */
        padding: 0.75rem 1.25rem;
        font-size: 0.95rem;
        border-color: #E2E8F0;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

        #chatInput:focus {
            border-color: var(--primary-color); /* Changed from #4CAF50 */
            box-shadow: 0 0 0 0.25rem rgba(var(--primary-color-rgb), 0.25); /* Changed from rgba(76, 175, 80, 0.25) */
        }

    #fileInputLabel, #recordButton {
        border-radius: 50%; /* Circular buttons */
        width: 45px;
        height: 45px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        color: #555;
        border: 1px solid #E2E8F0;
        background-color: #F8FAFC;
        cursor: pointer;
        transition: background-color 0.2s ease, color 0.2s ease, transform 0.1s ease;
    }

        #fileInputLabel:hover, #recordButton:hover {
            background-color: var(--secondary-color); /* Changed from #E0E7FF (but was already blueish) - now explicitly tied to var */
            color: var(--primary-color); /* Changed from #4CAF50 */
            transform: scale(1.05);
        }

        #recordButton.recording {
            background-color: #F44336; /* Red when recording (kept red as it's an alert color) */
            color: white;
        }

    #sendButton {
        border-radius: 25px; /* Rounded send button */
        padding: 0.75rem 1.5rem;
        font-size: 1rem;
        background-color: var(--primary-color); /* Changed from #4CAF50 */
        border-color: var(--primary-color); /* Changed from #4CAF50 */
        transition: background-color 0.2s ease, transform 0.1s ease;
    }

        #sendButton:hover {
            background-color: var(--primary-darker-color); /* Changed from #43A047 */
            transform: translateY(-1px);
        }

    #uploadProgress {
        margin-top: 10px;
        border-radius: 5px; /* Rounded progress bar */
        background-color: #E2E8F0;
    }

    #uploadProgressBar {
        background-color: var(--primary-color); /* Changed from #4CAF50 */
        border-radius: 5px;
    }

    /* Right Panel (Contact Info) */
    .contact-info-panel {
        flex: 0 0 300px; /* Fixed width */
        background-color: #FFFFFF;
        border-left: 1px solid #E2E8F0;
        padding: 1.5rem;
        overflow-y: auto;
    }

        .contact-info-panel h6 {
            font-weight: 600;
            color: #333;
            margin-bottom: 1.5rem;
        }

        .contact-info-panel .form-control {
            border-radius: 8px;
            border-color: #E2E8F0;
            font-size: 0.95rem;
        }

        .contact-info-panel .btn-outline-primary {
            border-radius: 8px;
            color: var(--primary-color); /* Changed from #4CAF50 */
            border-color: var(--primary-color); /* Changed from #4CAF50 */
        }

            .contact-info-panel .btn-outline-primary:hover {
                background-color: var(--primary-color); /* Changed from #4CAF50 */
                color: white;
            }

        .contact-info-panel .btn-success {
            border-radius: 8px;
            background-color: var(--primary-color); /* Changed from #4CAF50 */
            border-color: var(--primary-color); /* Changed from #4CAF50 */
            padding: 0.75rem 1rem;
            font-size: 1rem;
            font-weight: 600;
            transition: background-color 0.2s ease, transform 0.1s ease;
        }

            .contact-info-panel .btn-success:hover {
                background-color: var(--primary-darker-color); /* Changed from #43A047 */
                transform: translateY(-1px);
            }

        .contact-info-panel .text-muted {
            color: #777 !important;
        }

    /* Modal Styling (kept as is, generally modals should be neutral or follow app's primary color) */
    .modal-content {
        border-radius: 12px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
    }

    .modal-header {
        border-bottom: 1px solid #E2E8F0;
        padding: 1.5rem;
    }

    .modal-title {
        font-weight: 600;
        color: #333;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .modal-footer {
        border-top: 1px solid #E2E8F0;
        padding: 1.5rem;
    }

    /* Media Message Styling */
    .chat-bubble img, .chat-bubble video {
        max-width: 100%; /* Changed: !important removed */
        height: auto;
        border-radius: 10px;
        margin-bottom: 5px;
    }

    .chat-bubble audio {
        width: 100%;
        margin-bottom: 5px;
    }

    .chat-bubble a {
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
        font-weight: 500;
    }

        .chat-bubble a.text-white {
            color: white !important;
        }

        .chat-bubble a.text-black {
            color: black !important;
        }

</style>

<div class="d-flex flex-column h-100" style="height: 100vh; margin: 0;">
    <div class="row flex-nowrap flex-grow-1 overflow-hidden chat-container">
        <div class="chat-list-panel">
            <div class="chat-list-header">
                <h5 class="mb-0">Chats</h5>
                <button class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#newChatModal">
                    + New
                </button>
            </div>

            <div class="modal fade" id="newChatModal" tabindex="-1" aria-labelledby="newChatModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="newChatModalLabel">Start New Chat</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <input type="text" id="contactSearch" class="form-control mb-2" placeholder="Search name or phone..." oninput="filterContacts()" />

                            <div style="max-height: 300px; overflow-y: auto; border: 1px solid #E2E8F0; border-radius: 8px;">
                                <ul id="contactList" class="list-group list-group-flush mb-0">
                                    @foreach (var contact in Model.AllContacts)
                                    {
                                        <li class="list-group-item list-group-item-action" onclick="event.preventDefault(); selectChat('@contact.Phone')">
                                            <strong>@contact.Name</strong><br />
                                            <small class="text-muted">@contact.Phone</small>
                                        </li>
                                    }
                                </ul>
                            </div>

                            <div id="newContactOption" class="text-muted small d-none mt-3">
                                No match found. <a href="#" onclick="startNewChatFromInput()">Start new chat with this number</a>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" onclick="startNewChatFromInput()">Start</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="createDealModal" tabindex="-1" aria-labelledby="createDealModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <form class="modal-content" id="dealForm">
                        <div class="modal-header">
                            <h5 class="modal-title" id="createDealModalLabel">Create Deal</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <input type="hidden" id="dealContactPhone" name="contactPhone" />
                            <div class="mb-3">
                                <label for="dealName" class="form-label">Deal Name</label>
                                <input type="text" class="form-control" id="dealName" name="dealName" required>
                            </div>
                            <div class="mb-3">
                                <label for="dealValue" class="form-label">Value</label>
                                <input type="number" class="form-control" id="dealValue" name="dealValue" required>
                            </div>
                            <div class="mb-3">
                                <label for="dealStage" class="form-label">Stage</label>
                                <select class="form-select" id="dealStage" name="dealStage" required>
                                    <option value="Prospecting">Prospecting</option>
                                    <option value="Negotiation">Negotiation</option>
                                    <option value="Closed-Won">Closed-Won</option>
                                    <option value="Closed-Lost">Closed-Lost</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="dealStatus" class="form-label">Status</label>
                                <select class="form-select" id="dealStatus" name="dealStatus" required>
                                    <option value="Active">Active</option>
                                    <option value="Inactive">Inactive</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="expectedCloseDate" class="form-label">Expected Close Date</label>
                                <input type="date" class="form-control" id="expectedCloseDate" name="expectedCloseDate" required>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-success">Create Deal</button>
                        </div>
                    </form>
                </div>
            </div>

            <ul class="list-group sidebar-list flex-grow-1">
                @{
                    string lastGroup = "";
                }
                @foreach (var item in Model.GroupedLastMessages)
                {
                    if (item.Group != lastGroup)
                    {
                        <li class="list-group-item text-center small bg-light sticky-top day-group-label" style="z-index:1;">
                            @item.Group
                        </li>
                        lastGroup = item.Group;
                    }

                    var preview = item.Text?.Length > 30 ? item.Text.Substring(0, 30) + "..." : item.Text;
                    var time = item.Date?.ToString("hh:mm tt") ?? "";

                    <a href="#" onclick="event.preventDefault(); selectChat('@item.Phone')" class="list-group-item list-group-item-action @(item.IsActive ? "active" : "")">
                        <div class="d-flex justify-content-between align-items-center mb-1">
                            <strong>
                                @(string.IsNullOrEmpty(item.ContactName) ? item.Phone : $"{item.ContactName}")
                            </strong>
                            <small class="text-muted">@time</small>
                        </div>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="text-truncate small text-muted" style="max-width: 85%;">
                                @preview
                            </div>
                            @if (item.UnreadCount > 0 && item.Phone != Model.SelectedPhone)
                            {
                                <span class="badge bg-danger ms-2">@item.UnreadCount</span>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(item.AgentName))
                        {
                            <small class="text-muted mt-1" style="font-size: 0.65rem;">Assigned to: @item.AgentName</small>
                        }
                    </a>
                }
            </ul>
        </div>

        <div class="chat-panel">
            <div id="floatingDate">Today</div>
            <div id="chatMessages">
                </div>

            <div id="chatInputBar" class="d-flex flex-column">
                <div class="d-flex align-items-end w-100">
                    <label class="btn btn-outline-secondary me-2 mb-0" id="fileInputLabel">
                        <i class="fas fa-paperclip"></i>
                        <input type="file" id="fileInput" hidden />
                    </label>
                    <textarea id="chatInput" class="form-control me-2"
                                rows="1"
                                placeholder="Type a message..."
                                style="resize: none; max-height: 150px; overflow-y: auto;"></textarea>
                    <label class="btn btn-outline-secondary me-2 mb-0" id="recordButton">
                        <i class="fas fa-microphone"></i>
                    </label>
                    <button id="sendButton" class="btn btn-primary">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>

                <div id="uploadProgress" class="w-100 mt-2 d-none">
                    <div class="progress" style="height: 6px;">
                        <div id="uploadProgressBar" class="progress-bar" style="width: 0%;"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="contact-info-panel">
            <h6>Contact Info</h6>
            @if (!string.IsNullOrEmpty(Model.SelectedPhone))
            {
                <div class="mb-3">
                    <strong>Name:</strong>
                    <div class="input-group">
                        <input type="text" id="contactNameInput" class="form-control" value="@Model.ContactName" />
                        <button class="btn btn-outline-primary" onclick="saveContactName()">Save</button>
                    </div>
                </div>
                <div class="mb-3"><strong>Phone:</strong> <div>@Model.SelectedPhone</div></div>

                <div class="d-grid gap-2 mt-4">
                    <button class="btn btn-success" onclick="openCreateDealModal()">Create Deal</button>
                </div>

            }
            else
            {
                <div class="text-muted">Select a chat to see contact details.</div>
            }
        </div>
    </div>
</div>


    @section Scripts {
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/lamejs@1.2.0/lame.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/opus-recorder@7.0.0/dist/recorder.min.js"></script>


        <script>
        let selectedPhone = decodeURIComponent("@Model.SelectedPhone".replace(/&#x2B;|&#43;/g, "%2B"));
        let opusRecorder;
        let isRecording = false;
        const userRole = "@HttpContext.Session.GetString("Role")";

        document.getElementById("recordButton").addEventListener("click", async () => {
            if (userRole === "Admin") return;
            if (!isRecording) {
                // Start recording
                opusRecorder = new Recorder({
                    encoderPath: "https://cdn.jsdelivr.net/npm/opus-recorder@7.0.0/dist/encoderWorker.min.js",
                    mimeType: "audio/ogg; codecs=opus",
                    numberOfChannels: 1, // Mono as required by WhatsApp
                    encoderSampleRate: 48000, // WhatsApp compatible
                });

                    opusRecorder.ondataavailable = async (buffer) => {
                    // Convert buffer to Blob explicitly
                    const blob = new Blob([buffer], { type: "audio/ogg; codecs=opus" });

                    const formData = new FormData();
                    formData.append("file", blob, "voice.ogg");
                    formData.append("contactPhone", selectedPhone);

                    try {
                        const res = await fetch(`${window.API_BASE_URL}/api/chat/upload`, {
                            method: "POST",
                            body: formData,
                            credentials: "include"
                        });

                        if (res.ok) {
                            const result = await res.json();
                            console.log("✅ OPUS uploaded", result);
                            refreshSidebar();
                            scrollToBottom();
                        } else {
                            alert("Upload failed.");
                        }
                    } catch (err) {
                        console.error("Upload error", err);
                        alert("Upload failed.");
                    }
                };


                opusRecorder.start().then(() => {
                    isRecording = true;
                    recordButton.innerText = "⏹️";
                }).catch((e) => {
                    console.error("Mic access denied", e);
                    alert("Please allow microphone access.");
                });

            } else {
                // Stop and upload
                await opusRecorder.stop();
                isRecording = false;
                recordButton.innerText = "🎤";
            }
        });




            window.API_BASE_URL = '@Configuration["ApiSettings:BaseUrl"]';
            const shownMessageIds = new Set();
            let lastMessageDate = null;
            const allRecentPhones = @Html.Raw(Json.Serialize(Model.RecentPhones));
            
            const chatInput = document.getElementById("chatInput");
            const sendButton = document.getElementById("sendButton");
            const messageContainer = document.getElementById("chatMessages");
            const currentUserGroup = "user-" + @HttpContext.Session.GetString("UserID");

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting && entry.intersectionRatio > 0) {
                        const text = entry.target.textContent;
                        const floating = document.getElementById("floatingDate");
                        if (floating) floating.textContent = text;
                    }
                });
            }, {
                root: messageContainer,
                threshold: 1.0
            });



            async function selectChat(phone) {
                selectedPhone  = phone.startsWith("+") ? phone : "+" + phone;

                // Update URL without reloading
                window.history.pushState({}, '', `/Chat?phone=${encodeURIComponent(selectedPhone )}`);

                // Rejoin SignalR group
                await connection.invoke("JoinGroup", selectedPhone );
                console.log("✅ Switched to chat:", selectedPhone );

                // Refresh content
                await loadMessages();
                await refreshSidebar();
            }


             async function selectContact(phone) {
                await selectChat(phone); // 
            }

            document.getElementById("fileInput").addEventListener("change", function () {
                const file = this.files[0];
                if (!file) return;

                const formData = new FormData();
                formData.append("file", file);
                formData.append("contactPhone", selectedPhone);

                const xhr = new XMLHttpRequest();
                xhr.open("POST", `${window.API_BASE_URL}/api/chat/upload`)

                xhr.withCredentials = true;

                xhr.upload.addEventListener("progress", function (e) {
                    if (e.lengthComputable) {
                        const percent = (e.loaded / e.total) * 100;
                        document.getElementById("uploadProgress").classList.remove("d-none");
                        document.getElementById("uploadProgressBar").style.width = percent + "%";
                    }
                });

                xhr.onload = async function () {
                    document.getElementById("uploadProgressBar").style.width = "100%";
                    setTimeout(() => {
                        document.getElementById("uploadProgress").classList.add("d-none");
                        document.getElementById("uploadProgressBar").style.width = "0%";
                    }, 500);

                    if (xhr.status === 200) {
                        const result = JSON.parse(xhr.responseText);
                        console.log("Upload complete:", result);

                        if (result.messageId) {
                            shownMessageIds.add(result.messageId);
                        }

                        setTimeout(scrollToBottom, 100);
                        refreshSidebar();
                    } else {
                        alert("Upload failed");
                    }
                };

                xhr.onerror = function () {
                    alert("Upload failed");
                };

                xhr.send(formData);
            });




            async function saveContactName() {
                const name = document.getElementById("contactNameInput").value;
                const phone = selectedPhone;

                const dto = {
                    phone: phone,
                    name: name
                };

                const res = await fetch(`${window.API_BASE_URL}/api/Contact/UpdateNameByPhone`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    credentials: "include",
                    body: JSON.stringify(dto)
                });

                if (res.ok) {
                    alert("Name updated");
                    await refreshSidebar(); // Optional: update list too
                    document.querySelector("#contactList").innerHTML = "";
                } else {
                    alert("Failed to update name");
                }
            }


              function scrollToBottom() {
                    requestAnimationFrame(() => {
                        const lastMessage = messageContainer.lastElementChild;
                        if (lastMessage) {
                            // Using 'auto' for behavior is typically better for real-time chat
                            // as it prevents a small scroll animation every time.
                            lastMessage.scrollIntoView({ behavior: 'auto', block: 'end' });
                        }
                    });
                }


            chatInput.addEventListener("keydown", function (event) {
                if (event.key === "Enter" && !event.shiftKey) {
                    event.preventDefault(); // Prevent new line
                    sendButton.click();     // Trigger the send button click
                }
            });

            chatInput.addEventListener("input", function () {
                this.style.height = "auto";
                this.style.height = this.scrollHeight + "px";
            });

                sendButton.addEventListener("click", async () => {
                    const message = chatInput.value.trim();
                    if (!message) return;

                    const dto = {
                        contactPhone: selectedPhone.replace(/&#x2B;|&#43;/g, "+"),
                        messageText: message,
                        messageType: "text"
                    };

                    try {
                        const res = await fetch(`${window.API_BASE_URL}/api/chat/send`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            credentials: "include",
                            body: JSON.stringify(dto)
                        });

                        if (res.ok) {
                            chatInput.value = "";
                            scrollToBottom();
                            refreshSidebar();
                        } else {
                            alert("Failed to send message.");
                        }
                    } catch (err) {
                        console.error("Send error:", err);
                    }
                });


                 async function loadMessages() {
                    try {
                        const normalizedPhone = selectedPhone.startsWith("+") ? selectedPhone : "+" + selectedPhone;

                        // 🔁 Fetch first — don’t clear old messages yet
                        const res = await fetch(`/Chat?handler=Messages&phone=${encodeURIComponent(normalizedPhone)}`);
                        const messages = await res.json();

                        // ✅ Only clear DOM now (after we have data)
                        messageContainer.innerHTML = "";
                        lastMessageDate = null;

                        messages.forEach(msg => {
                            if (!shownMessageIds.has(msg.messageId)) {
                                shownMessageIds.add(msg.messageId);
                                appendMessage(msg.messageText, msg.isSender, msg.createdDate, msg.timeString, msg.messageType);
                            }
                        });


                    setTimeout(scrollToBottom, 50);

                        await fetch("/Chat?handler=MarkAsRead", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(selectedPhone)
                        });

                        refreshSidebar();

                    } catch (err) {
                        console.error("Load error:", err);
                    }
                }


                function getFullUrl(path) {
                    const current = window.location.origin;
                    const api = current.replace("44373", "44309"); // frontend → backend
                    return path.startsWith("http") ? path : api + path;
                }





            let lastSender = null;

                function appendMessage(messageText, isSender, createdDateRaw, timeString, messageType = "text") {
                    const createdDate = new Date(createdDateRaw);
                    const createdDay = createdDate.toDateString();

                    if (createdDay !== lastMessageDate) {
                        lastMessageDate = createdDay;
                        const label = document.createElement("div");
                        label.className = "day-label";
                        label.textContent = formatDayLabel(createdDate);
                        const dayWrapper = document.createElement("div");
                        dayWrapper.className = "day-wrapper";
                        dayWrapper.appendChild(label);
                        messageContainer.appendChild(dayWrapper);
                        observer.observe(label);
                    }

                    const wrapper = document.createElement("div");
                    wrapper.className = "mb-2 d-flex flex-column";
                    wrapper.style.alignItems = isSender ? "flex-end" : "flex-start";

                    const bubble = document.createElement("div");
                    bubble.className = "chat-bubble";
                    if (isSender) bubble.classList.add("sent");

                    // Render content based on type
                        if (messageType === "image") {
                    const img = document.createElement("img");
                    img.src = getFullUrl(messageText);
                    img.alt = "image";
                    img.style.maxWidth = "200px";
                    img.style.borderRadius = "0.5rem";
                    bubble.appendChild(img);
                    // ⭐ NEW: Wait for image to load before attempting to scroll
                    img.onload = () => {
                        scrollToBottom();
                    };
                    img.onerror = () => {
                        console.error("Failed to load image:", img.src);
                        scrollToBottom(); // Still try to scroll even if image fails to load
                    };
                } else if (messageType === "video") {
                    const video = document.createElement("video");
                    video.src = getFullUrl(messageText);
                    video.controls = true;
                    video.style.maxWidth = "250px";
                    bubble.appendChild(video);
                    // ⭐ NEW: Wait for video metadata to load
                    video.onloadedmetadata = () => {
                        scrollToBottom();
                    };
                    video.onerror = () => {
                        console.error("Failed to load video:", video.src);
                        scrollToBottom(); // Still try to scroll
                    };
                } else if (messageType === "audio") {
                    const audio = document.createElement("audio");
                    audio.src = getFullUrl(messageText);
                    audio.controls = true;
                    bubble.appendChild(audio);
                    // ⭐ NEW: Wait for audio metadata to load
                    audio.onloadedmetadata = () => {
                        scrollToBottom();
                    };
                    audio.onerror = () => {
                        console.error("Failed to load audio:", audio.src);
                        scrollToBottom(); // Still try to scroll
                    };
                } else if (messageType === "document") {
                    const link = document.createElement("a");
                    link.href = getFullUrl(messageText);
                    link.textContent = "📄 Download Document";
                    link.target = "_blank";
                    link.style.color = isSender ? "white" : "black";
                    link.style.textDecoration = "underline";
                    bubble.appendChild(link);
                    // ⭐ For documents, the size is usually fixed, so a direct scroll is fine.
                    setTimeout(scrollToBottom, 50);
                } else { // messageType === "text"
                    bubble.innerHTML = messageText.replace(/\n/g, "<br>");
                    // ⭐ For text, a direct scroll is fine.
                    setTimeout(scrollToBottom, 50);
                }

                const time = document.createElement("div");
                time.className = "chat-meta " + (isSender ? "right" : "left");
                time.textContent = timeString;

                wrapper.appendChild(bubble);
                wrapper.appendChild(time);
                messageContainer.appendChild(wrapper);
                }


                 function openCreateDealModal() {
                    document.getElementById('dealContactPhone').value = selectedPhone;
                    document.getElementById('dealForm').reset(); // Clear previous entries
                    const modal = new bootstrap.Modal(document.getElementById('createDealModal'));
                    modal.show();
                }

                document.getElementById("dealForm").addEventListener("submit", async function (e) {
                    e.preventDefault();

                    const dto = {
                        dealName: document.getElementById("dealName").value,
                        value: parseFloat(document.getElementById("dealValue").value),
                        stage: document.getElementById("dealStage").value,
                        status: document.getElementById("dealStatus").value,
                        expectedCloseDate: document.getElementById("expectedCloseDate").value,
                        contactPhone: document.getElementById("dealContactPhone").value
                    };

                    try {
                        const res = await fetch(`${window.API_BASE_URL}/api/Deal/CreateDealFromChat`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            credentials: "include",
                            body: JSON.stringify(dto)
                        });

                        if (res.ok) {
                            bootstrap.Modal.getInstance(document.getElementById('createDealModal')).hide();
                            alert("Deal created successfully.");
                        } else {
                            alert("Failed to create deal.");
                        }
                    } catch (err) {
                        console.error("Error creating deal:", err);
                        alert("Something went wrong.");
                    }
                });


            async function refreshSidebar() {
                try {
                    const res = await fetch("/Chat?handler=Sidebar");
                    const data = await res.json();
                    if (!data.success) return;

                    const list = document.querySelector(".sidebar-list");

                    list.innerHTML = ""; // Clear current chat list

                    const updatedPhones = data.phones ?? [];

                    let lastGroup = "";
                    data.lastMessages.forEach(msg => {
                        const group = msg.group || "";
                        if (group !== lastGroup) {
                            list.innerHTML += `
                                <li class="list-group-item text-center text-muted small bg-light sticky-top" style="z-index:1;">
                                    ${group}
                                </li>`;
                            lastGroup = group;
                        }

                        const time = msg.timeString ?? "";


                        const preview = msg.text?.length > 30 ? msg.text.substring(0, 30) + "..." : msg.text ?? "";
                        const activeClass = msg.phone === selectedPhone ? "active" : "";

                        list.innerHTML += `
                                    <a href="?phone=${encodeURIComponent(msg.phone)}" class="list-group-item list-group-item-action ${activeClass}">
            <div class="d-flex justify-content-between align-items-start"> <div class="flex-grow-1 text-truncate"> <strong>
                        ${msg.contactName ? `${msg.contactName} ` : ''}
                        (${msg.phone})
                        ${msg.agentName ? `<small class="text-muted"> • ${msg.agentName}</small>` : ""}
                    </strong>
                </div>
                <small class="text-muted ms-auto">${time}</small> </div>
            <div class="d-flex justify-content-between align-items-center">
                <div class="text-truncate small text-muted" style="max-width: 85%;">
                    ${preview}
                </div>
                ${msg.unreadCount > 0 && msg.phone !== selectedPhone
                    ? `<span class="badge bg-danger ms-2">${msg.unreadCount}</span>`
                    : ""}
            </div>
        </a>`;
                    });

                    // 🧠 Re-join SignalR groups for any new phone numbers
                    for (const phone of updatedPhones) {
                        if (!allRecentPhones.includes(phone)) {
                            allRecentPhones.push(phone);
                            await connection.invoke("JoinGroup", phone);
                            console.log("📡 Dynamically joined new SignalR group:", phone);
                        }
                    }

                } catch (err) {
                    console.error("Failed to refresh sidebar:", err);
                }
            }


            function formatDayLabel(date) {
                const today = new Date();
                const yesterday = new Date();
                yesterday.setDate(today.getDate() - 1);

                if (date.toDateString() === today.toDateString()) {
                    return "Today";
                } else if (date.toDateString() === yesterday.toDateString()) {
                    return "Yesterday";
                } else {
                    return date.toLocaleDateString(undefined, {
                        weekday: "long",
                        year: "numeric",
                        month: "short",
                        day: "numeric"
                    });
                }
            }

                    let connection; // declared globally
                    let hasSignalRStarted = false;

                async function startSignalR() {
                    if (connection && connection.state === "Connected") {
                        console.log("🔁 Disposing existing SignalR connection...");
                        await connection.stop(); // disconnect old connection
                    }
                    const hubUrl = `${window.API_BASE_URL}/chathub`;


                    connection = new signalR.HubConnectionBuilder()
                    .withUrl(hubUrl, {
                            withCredentials: true
                        })
                        .build();

                    connection.off("ReceiveMessage");
                    connection.off("RefreshSidebar");

                    connection.on("ReceiveMessage", (msg) => {
                        try {
                            if (typeof msg === "string") msg = JSON.parse(msg);

                            function normalizePhone(phone) {
                                return phone?.toString().trim().replace(/\s+/g, "").replace(/^(\+)?/, "+");
                            }

                            if (normalizePhone(msg.contactPhone) !== normalizePhone(selectedPhone)) {
                                console.log("⛔ Ignoring message not for active chat:", msg.contactPhone);
                                return;
                            }

                            if (!msg.messageText || !msg.messageId || shownMessageIds.has(msg.messageId)) return;

                            shownMessageIds.add(msg.messageId);
                            appendMessage(msg.messageText, msg.isSender, msg.createdDate, msg.timeString, msg.messageType); // ✅ Add messageType here
                            scrollToBottom();
                            refreshSidebar();
                        } catch (err) {
                            console.error("❌ Error in ReceiveMessage:", err, msg);
                        }
                    });



                    connection.on("RefreshSidebar", (phone) => {
                        console.log("📣 Sidebar refresh triggered for:", phone);
                        refreshSidebar();
                    });

                    try {
                        await connection.start();
                        console.log("✅ SignalR connected");

                        // ✅ Join all recent phone groups
                        for (const phone of allRecentPhones) {
                            const normalized = phone.trim();
                            await connection.invoke("JoinGroup", normalized);
                            console.log("🔗 Joined SignalR group:", normalized);
                        }

                        // ✅ Join CRM user’s own group
                        await connection.invoke("JoinGroup", currentUserGroup);
                        console.log("🔗 Joined user SignalR group:", currentUserGroup);

                    } catch (err) {
                        console.error("❌ SignalR connection error:", err);
                    }
                }




            // Init
            window.addEventListener("load", async () => {
                await startSignalR();        // ✅ Handles connection + group join
                await loadMessages();     
                
                if ("@HttpContext.Session.GetString("Role")" === "Admin") {
                    document.getElementById("chatInput").disabled = true;
                    document.getElementById("sendButton").disabled = true;
                    document.getElementById("recordButton").disabled = true;
                    document.getElementById("fileInput").disabled = true;
                }
            });


            function filterContacts() {
                const input = document.getElementById("contactSearch").value.trim().toLowerCase();
                const list = document.getElementById("contactList");
                const items = list.querySelectorAll("li");

                let matchFound = false;

                items.forEach(item => {
                    const text = item.textContent.toLowerCase();
                    const visible = text.includes(input);
                    item.style.display = visible ? "block" : "none";
                    if (visible) matchFound = true;
                });

                document.getElementById("newContactOption").classList.toggle("d-none", matchFound || input === "");
            }

            function selectContact(phone) {
                window.location.href = `/Chat?phone=${encodeURIComponent(phone)}`;
            }

            function startNewChatFromInput() {
                const input = document.getElementById("contactSearch").value.trim();
                if (!input) return;
                const normalized = input.startsWith("+") ? input : "+" + input;
                window.location.href = `/Chat?phone=${encodeURIComponent(normalized)}`;
            }

        

        </script>
    }

