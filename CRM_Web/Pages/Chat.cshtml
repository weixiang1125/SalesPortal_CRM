@page
@model CRM_Web.Pages.Chat.IndexModel
@attribute [IgnoreAntiforgeryToken]
@{
    ViewData["Title"] = "Chat";
}

    <style>
        html, body {
            height: 100%;
            overflow: hidden;
        }

    #chatMessages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 1rem;
        min-height: 0;
        background-color: #f5f6fa;
    }

    .chat-bubble {
        max-width: 75%;
        padding: 0.75rem 1rem;
        border-radius: 1rem;
        word-break: break-word;
        white-space: pre-wrap;
        font-size: 0.95rem;
        overflow-wrap: break-word;
        background-color: #ffffff;
        color: black;
    }

        .chat-bubble.sent {
            background-color: #0d6efd;
            color: white;
        }

    .chat-meta {
        font-size: 0.7rem;
        color: #888;
        margin-top: 4px;
    }

    .chat-meta.left {
        text-align: left;
    }

    .chat-meta.right {
        text-align: right;
    }

    .day-wrapper {
        position: sticky;
        top: 0.5rem;
        z-index: 10;
        display: flex;
        justify-content: center;
        background: transparent; /* prevent blocking other content */
        pointer-events: none; /* allow clicks to pass through */
    }

    .day-label {
        background-color: #e0e0e0;
        color: #555;
        font-size: 0.75rem;
        padding: 0.25rem 1rem;
        border-radius: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        pointer-events: auto; /* label still clickable if needed */
    }

    .list-group-item {
        padding: 0.75rem 1rem;
    }

    .list-group-item .text-truncate {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
    }

    .list-group-item.active {
        background-color: #e3f2fd !important; /* Softer blue */
        border-color: #b6daff !important;
        color: #000 !important; /* Ensure text is readable */
    }

    .list-group-item.active strong,
    .list-group-item.active small,
    .list-group-item.active div {
       color: #000 !important;
    }


    </style>

    <div class="row flex-nowrap" style="height: calc(100vh - 60px); margin: 0;">
        <!-- Chat List -->
        <div class="col-3 border-end bg-white p-3 overflow-auto">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="mb-0">Chats</h5>
                <button class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#newChatModal">
                    + New
                </button>
            </div>

            <!-- New Chat Modal -->
            <div class="modal fade" id="newChatModal" tabindex="-1" aria-labelledby="newChatModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="newChatModalLabel">Start New Chat</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <input type="text" id="contactSearch" class="form-control mb-2" placeholder="Search name or phone..." oninput="filterContacts()" />

                            <div style="max-height: 300px; overflow-y: auto;">
                                <ul id="contactList" class="list-group mb-2">
                                    @foreach (var contact in Model.AllContacts)
                                    {
                                        <li class="list-group-item list-group-item-action" onclick="selectContact('@contact.Phone')">
                                            <strong>@contact.Name</strong><br />
                                            <small>@contact.Phone</small>
                                        </li>
                                    }
                                </ul>
                            </div>

                            <div id="newContactOption" class="text-muted small d-none">
                                No match found. <a href="#" onclick="startNewChatFromInput()">Start new chat with this number</a>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" onclick="startNewChatFromInput()">Start</button>
                        </div>
                    </div>
                </div>
            </div>

            <ul class="list-group">
                @foreach (var phone in Model.RecentPhones)
                {
                    var lastMessage = Model.LastMessagesByPhone.ContainsKey(phone)
                    ? Model.LastMessagesByPhone[phone]
                    : null;

                    var preview = lastMessage?.MessageText?.Length > 30
                    ? lastMessage.MessageText.Substring(0, 30) + "..."
                    : lastMessage?.MessageText ?? "";

                    var time = lastMessage?.CreatedDate != null
                    ? TimeZoneInfo.ConvertTimeFromUtc(lastMessage.CreatedDate.Value, TimeZoneInfo.FindSystemTimeZoneById("Singapore Standard Time")).ToString("hh:mm tt")
                    : "";


                    <a href="?phone=@phone" class="list-group-item list-group-item-action @(Model.SelectedPhone == phone ? "active" : "")">
                        <div class="d-flex justify-content-between">
                            <strong>@phone</strong>
                            <small class="text-muted">@time</small>
                        </div>
                        <div class="text-truncate small text-muted" style="max-width: 100%;">
                            @preview
                        </div>
                    </a>
                }
            </ul>
        </div>

        <!-- Chat Messages -->
        <div class="col-6 d-flex flex-column bg-light p-0" style="height: calc(100vh - 60px);">
            <div id="chatMessages">
                @foreach (var msg in Model.Messages)
                {
                    <div class="mb-2 d-flex flex-column align-items-@(msg.IsSender.GetValueOrDefault() ? "end" : "start")">
                        <div class="d-inline-flex flex-column align-items-@(msg.IsSender.GetValueOrDefault() ? "end" : "start")">
                            <div class="chat-bubble @(msg.IsSender.GetValueOrDefault() ? "sent" : "")">
                                @msg.MessageText
                            </div>
                            <div class="chat-meta @(msg.IsSender.GetValueOrDefault() ? "right" : "left")">
                                @TimeZoneInfo.ConvertTimeFromUtc(msg.CreatedDate.Value, TimeZoneInfo.FindSystemTimeZoneById("Singapore Standard Time")).ToString("hh:mm tt")

                            </div>
                        </div>
                    </div>

                }
            </div>

            <div id="chatInputBar" class="d-flex border-top px-3 py-2"
                 style="position: sticky; bottom: 0; background-color: #f8f9fa; z-index: 10;">
                <textarea id="chatInput" class="form-control me-2"
                          rows="1"
                          placeholder="Type a message..."
                          style="resize: none; max-height: 150px; overflow-y: auto;"></textarea>

                <button id="sendButton" class="btn btn-primary">Send</button>
            </div>
        </div>

        <!-- Contact Info -->
        <div class="col-3 border-start bg-white p-3">
            <h6>Contact Info</h6>
            @if (!string.IsNullOrEmpty(Model.SelectedPhone))
            {
                <div class="mb-3"><strong>Phone:</strong> <div>@Model.SelectedPhone</div></div>
                <div class="mb-3"><strong>Name:</strong> <div><!-- Add name if needed --></div></div>
                <div class="d-grid gap-2">
                    <button class="btn btn-outline-secondary">📝 Add Note</button>
                    <button class="btn btn-outline-success">💼 Create Deal</button>
                </div>
            }
            else
            {
                <div class="text-muted">Select a chat to see contact details.</div>
            }
        </div>
    </div>


    @section Scripts {
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

        <script>
            const shownMessageIds = new Set();
            let lastMessageDate = null;
            const allRecentPhones = @Html.Raw(Json.Serialize(Model.RecentPhones));
            const selectedPhone = decodeURIComponent("@Model.SelectedPhone".replace(/&#x2B;|&#43;/g, "%2B"));
            const chatInput = document.getElementById("chatInput");
            const sendButton = document.getElementById("sendButton");
            const messageContainer = document.getElementById("chatMessages");
            const currentUserGroup = "user-" + @HttpContext.Session.GetString("UserID");


            function adjustBottomPadding() {
                const inputBar = document.getElementById("chatInputBar");
                const chatMessages = document.getElementById("chatMessages");

                if (inputBar && chatMessages) {
                    const inputHeight = inputBar.offsetHeight;
                    const safePadding = inputHeight - 8; // remove a little margin to keep it tight, but visible
                    chatMessages.style.paddingBottom = `${safePadding}px`;
                }
            }


            async function selectContact(phone) {
                const urlParams = new URLSearchParams(window.location.search);
                const selectedFromUrl = urlParams.get("phone") || "";
                const normalizedPhone = selectedFromUrl.startsWith("+") ? selectedFromUrl : "+" + selectedFromUrl;
                await connection.invoke("JoinGroup", normalizedPhone.trim());
                console.log("✅ Joined group before redirecting:", normalizedPhone);
                window.location.href = `/Chat?phone=${encodeURIComponent(normalizedPhone)}`;
            }



            function scrollToBottom() {
                adjustBottomPadding();
                setTimeout(() => {
                    messageContainer.scrollTop = messageContainer.scrollHeight;
                }, 0); // ensure DOM updates before scroll
            }
            window.addEventListener("load", adjustBottomPadding);

            chatInput.addEventListener("keydown", function (event) {
                if (event.key === "Enter" && !event.shiftKey) {
                    event.preventDefault(); // Prevent new line
                    sendButton.click();     // Trigger the send button click
                }
            });

            chatInput.addEventListener("input", function () {
                this.style.height = "auto";
                this.style.height = this.scrollHeight + "px";
                adjustBottomPadding();
            });

            window.addEventListener("resize", adjustBottomPadding);

                sendButton.addEventListener("click", async () => {
                    const message = chatInput.value.trim();
                    if (!message) return;

                    const dto = {
                        contactPhone: selectedPhone.replace(/&#x2B;|&#43;/g, "+"),
                        messageText: message,
                        messageType: "text"
                    };

                    try {
                        const res = await fetch("https://localhost:44309/api/chat/send", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            credentials: "include",
                            body: JSON.stringify(dto)
                        });

                        if (res.ok) {
                            chatInput.value = "";
                            scrollToBottom();
                            refreshSidebar();
                        } else {
                            alert("Failed to send message.");
                        }
                    } catch (err) {
                        console.error("Send error:", err);
                    }
                });


        async function loadMessages() {
            try {
                const normalizedPhone = selectedPhone.startsWith("+") ? selectedPhone : "+" + selectedPhone;

                // 1. Load chat messages
                const res = await fetch(`/Chat?handler=Messages&phone=${encodeURIComponent(normalizedPhone)}`);
                const messages = await res.json();

                messageContainer.innerHTML = "";
                lastMessageDate = null;

                messages.forEach(msg => {
                    appendMessage(msg.messageText, msg.isSender, msg.createdDate);
                });

                scrollToBottom();

                // 2. Mark messages as read (important)
                await fetch("/Chat?handler=MarkAsRead", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(selectedPhone)
                });

                // 3. Refresh sidebar to remove unread highlight
                refreshSidebar();

            } catch (err) {
                console.error("Load error:", err);
            }
        }



            let lastSender = null;

            function appendMessage(messageText, isSender, createdDateRaw) {
                const createdDate = new Date(createdDateRaw);
                const createdDay = createdDate.toDateString();

                if (createdDay !== lastMessageDate) {
                    lastMessageDate = createdDay;
                    const label = document.createElement("div");
                    label.className = "day-label";
                    label.textContent = formatDayLabel(createdDate);
                    const dayWrapper = document.createElement("div");
                    dayWrapper.className = "day-wrapper";
                    dayWrapper.appendChild(label);
                    messageContainer.appendChild(dayWrapper);

                }

                const wrapper = document.createElement("div");
                wrapper.className = "mb-2 d-flex flex-column";
                wrapper.style.alignItems = isSender ? "flex-end" : "flex-start";

                const bubble = document.createElement("div");
                bubble.className = "chat-bubble";
                if (isSender) bubble.classList.add("sent");
                bubble.innerHTML = messageText.replace(/\n/g, "<br>");

                const time = document.createElement("div");
                time.className = "chat-meta " + (isSender ? "right" : "left");
                time.textContent = createdDate.toLocaleTimeString([], {
                    hour: "2-digit",
                    minute: "2-digit",
                });

                wrapper.appendChild(bubble);
                wrapper.appendChild(time);
                messageContainer.appendChild(wrapper);
            }

            async function refreshSidebar() {
                try {
                    const res = await fetch("/Chat?handler=Sidebar");
                    const data = await res.json();
                    if (!data.success) return;

                    const list = document.querySelector(".list-group");
                    list.innerHTML = ""; // Clear current chat list

                    const updatedPhones = data.phones ?? [];

                    data.lastMessages.forEach(msg => {
                        const time = msg.date
                            ? new Date(msg.date).toLocaleTimeString("en-MY", {
                                hour: "2-digit",
                                minute: "2-digit",
                                hour12: true,
                                timeZone: "Asia/Kuala_Lumpur"
                            })
                            : "";

                        const preview = msg.text?.length > 30 ? msg.text.substring(0, 30) + "..." : msg.text ?? "";

                        const activeClass = msg.phone === selectedPhone ? "active" : "";
                        const unreadClass = msg.isUnread && msg.phone !== selectedPhone ? "fw-bold text-primary" : "";

                        list.innerHTML += `
            <a href="?phone=${encodeURIComponent(msg.phone)}" class="list-group-item list-group-item-action ${activeClass}">
                <div class="d-flex justify-content-between">
                    <strong>${msg.phone}</strong>
                    <small class="text-muted">${time}</small>
                </div>
                <div class="text-truncate small text-muted ${unreadClass}" style="max-width: 100%;">
                    ${preview}
                </div>
            </a>`;
                    });

                    // 🧠 Re-join SignalR groups for any new phone numbers
                    for (const phone of updatedPhones) {
                        if (!allRecentPhones.includes(phone)) {
                            allRecentPhones.push(phone);
                            await connection.invoke("JoinGroup", phone);
                            console.log("📡 Dynamically joined new SignalR group:", phone);
                        }
                    }

                } catch (err) {
                    console.error("Failed to refresh sidebar:", err);
                }
            }


            function formatDayLabel(date) {
                const today = new Date();
                const yesterday = new Date();
                yesterday.setDate(today.getDate() - 1);

                if (date.toDateString() === today.toDateString()) {
                    return "Today";
                } else if (date.toDateString() === yesterday.toDateString()) {
                    return "Yesterday";
                } else {
                    return date.toLocaleDateString(undefined, {
                        weekday: "long",
                        year: "numeric",
                        month: "short",
                        day: "numeric"
                    });
                }
            }

                    let connection; // declared globally
                    let hasSignalRStarted = false;

                async function startSignalR() {
                    if (connection && connection.state === "Connected") {
                        console.log("🔁 Disposing existing SignalR connection...");
                        await connection.stop(); // disconnect old connection
                    }

                    connection = new signalR.HubConnectionBuilder()
                        .withUrl("https://25bd-2001-f40-974-801e-9421-3fb1-d6f1-1e75.ngrok-free.app/chathub", {
                            withCredentials: true
                        })
                        .build();

                    connection.off("ReceiveMessage");
                    connection.off("RefreshSidebar");

                    connection.on("ReceiveMessage", (msg) => {
                        try {
                            if (typeof msg === "string") msg = JSON.parse(msg);

                                function normalizePhone(phone) {
                                    return phone?.toString().trim().replace(/\s+/g, "").replace(/^(\+)?/, "+");
                                }

                                if (normalizePhone(msg.contactPhone) !== normalizePhone(selectedPhone)) {
                                    console.log("⛔ Ignoring message not for active chat:", msg.contactPhone, "(expected:", normalizePhone(selectedPhone) + ")");
                                    return;
                                }



                            if (!msg.messageText || !msg.messageId || shownMessageIds.has(msg.messageId)) return;
                            console.log("📥 Received message:", msg.messageId, msg);

                            shownMessageIds.add(msg.messageId);
                            appendMessage(msg.messageText, msg.isSender, msg.createdDate);
                            scrollToBottom();
                            refreshSidebar();

                        } catch (err) {
                            console.error("❌ Error in ReceiveMessage:", err, msg);
                        }
                    });


                    connection.on("RefreshSidebar", (phone) => {
                        console.log("📣 Sidebar refresh triggered for:", phone);
                        refreshSidebar();
                    });

                    try {
                        await connection.start();
                        console.log("✅ SignalR connected");

                        // ✅ Join all recent phone groups
                        for (const phone of allRecentPhones) {
                            const normalized = phone.trim();
                            await connection.invoke("JoinGroup", normalized);
                            console.log("🔗 Joined SignalR group:", normalized);
                        }

                        // ✅ Join CRM user’s own group
                        await connection.invoke("JoinGroup", currentUserGroup);
                        console.log("🔗 Joined user SignalR group:", currentUserGroup);

                    } catch (err) {
                        console.error("❌ SignalR connection error:", err);
                    }
                }




            // Init
            window.addEventListener("load", async () => {
                await startSignalR();        // ✅ Handles connection + group join
                await loadMessages();        // ✅ Pulls missed messages
                adjustBottomPadding();       // ✅ Adjust layout
            });


            function filterContacts() {
                const input = document.getElementById("contactSearch").value.trim().toLowerCase();
                const list = document.getElementById("contactList");
                const items = list.querySelectorAll("li");

                let matchFound = false;

                items.forEach(item => {
                    const text = item.textContent.toLowerCase();
                    const visible = text.includes(input);
                    item.style.display = visible ? "block" : "none";
                    if (visible) matchFound = true;
                });

                document.getElementById("newContactOption").classList.toggle("d-none", matchFound || input === "");
            }

            function selectContact(phone) {
                window.location.href = `/Chat?phone=${encodeURIComponent(phone)}`;
            }

            function startNewChatFromInput() {
                const input = document.getElementById("contactSearch").value.trim();
                if (!input) return;
                const normalized = input.startsWith("+") ? input : "+" + input;
                window.location.href = `/Chat?phone=${encodeURIComponent(normalized)}`;
            }

        

        </script>
    }

