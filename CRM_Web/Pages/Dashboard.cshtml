@page
@using Newtonsoft.Json
@model CRM_Web.Pages.Dashboard.DashboardModel
@{
    ViewData["Title"] = "Dashboard";
    Layout = "_Layout";
    var role = ViewData["Role"]?.ToString();
    var userStats = ViewData["GroupedUserKpis"] as List<SharedLibrary.DTOs.SalesPerformanceDto>;
}
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"> @* Added Font Awesome for icons *@

<style>
    :root {
        --primary-color: #4F46E5; /* A vibrant Indigo for primary elements */
        --secondary-color: #E0E7FF; /* Light Indigo for secondary elements */
        --text-dark: #1F2937; /* Darker text for better contrast */
        --text-medium: #4B5563; /* Medium gray for secondary text */
        --card-bg: #ffffff;
        --card-shadow: rgba(0,0,0,0.08);
        --border-radius-lg: 1.25rem; /* More rounded corners */
        --border-radius-md: 0.75rem;
        /* New energetic colors */
        --success-light: #D1FAE5; /* Light Green */
        --success-dark: #065F46; /* Dark Green */
        --danger-light: #FEE2E2; /* Light Red */
        --danger-dark: #991B1B; /* Dark Red */
        --info-light: #DBEAFE; /* Light Blue */
        --info-dark: #1E40AF; /* Dark Blue */
        --warning-light: #FFFBEB; /* Light Yellow/Orange */
        --warning-dark: #92400E; /* Dark Yellow/Orange */
        /* Additional colors for distinct cards */
        --purple-light: #EDE9FE;
        --purple-dark: #5B21B6;
        --cyan-light: #CFFAFE;
        --cyan-dark: #0891B2;
        --orange-light: #FFEDD5;
        --orange-dark: #C2410C;
        --teal-light: #CCFBF1; /* Added new color */
        --teal-dark: #0F766E; /* Added new color */
        --pink-light: #FCE7F3; /* Added new color */
        --pink-dark: #BE185D; /* Added new color */
    }

    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f8f9fa; /* Very light background for premium feel */
        color: var(--text-dark);
    }

    h2, h3, h4, h5, h6 {
        font-weight: 700; /* Bolder headings */
    }

    .card {
        border-radius: var(--border-radius-lg); /* Rounded corners */
        box-shadow: 0 6px 18px var(--card-shadow); /* More pronounced shadow */
        background-color: var(--card-bg);
        border: none; /* Remove default border */
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out; /* Smooth transitions */
    }

        .card:hover {
            transform: translateY(-5px); /* Slight lift on hover */
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }

    .card-header {
        font-weight: 600;
        background-color: #f8f9fa; /* Light background for headers */
        border-bottom: 1px solid #e9ecef;
        border-top-left-radius: var(--border-radius-lg);
        border-top-right-radius: var(--border-radius-lg);
    }

    /* --- New/Modified Styles for Top 6 Metric Cards --- */
    .metric-card {
        display: flex;
        flex-direction: column;
        border-radius: var(--border-radius-lg);
        box-shadow: 0 6px 18px var(--card-shadow);
        background-color: var(--card-bg); /* Default background, overridden below */
        border: none;
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        overflow: hidden; /* To contain the rounded corners of the inner icon card */
        height: 100%; /* Ensure cards in a row have equal height */
    }

        .metric-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }

    .metric-card-body {
        padding: 1rem;
        text-align: center;
        flex-grow: 1; /* Allows the body to take available space */
        display: flex;
        flex-direction: column;
        justify-content: center; /* Center content vertically if flex-grow is used */
    }

        .metric-card-body h6 {
            font-size: 0.95rem;
            margin-bottom: 0.25rem; /* Less margin below the label */
            color: var(--text-medium);
            font-weight: 600;
            white-space: nowrap; /* Prevent text from wrapping */
            overflow: hidden; /* Hide overflow if nowrap causes issues */
            text-overflow: ellipsis; /* Add ellipsis if text is truncated */
        }

    .metric-value-container {
        display: flex;
        justify-content: space-between; /* Push value to the left and icon to the right */
        align-items: center;
        padding: 0 1rem 1rem 1rem; /* Add some padding on the sides and bottom */
    }

    .metric-value-text {
        font-size: 1.85rem;
        color: var(--primary-color); /* Use primary color by default, overridden below */
        font-weight: 700;
    }

    .metric-icon-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: var(--secondary-color); /* Default background, overridden below */
        color: var(--primary-color); /* Icon color, overridden below */
        width: 2.5rem; /* Adjust size as needed */
        height: 2.5rem; /* Adjust size as needed */
        border-radius: 0.5rem; /* Round the icon background */
        flex-shrink: 0; /* Prevent icon from shrinking */
    }

        .metric-icon-wrapper i {
            font-size: 1.2rem; /* Adjust icon size */
        }

    /* Specific Metric Card Colors */
    /* Target Sales */
    .metric-card.target-sales {
        background-color: var(--info-light);
    }
    .metric-card.target-sales .metric-value-text,
    .metric-card.target-sales .metric-icon-wrapper {
        color: var(--info-dark);
    }
    .metric-card.target-sales .metric-icon-wrapper {
        background-color: color-mix(in srgb, var(--info-light) 80%, white);
    }

    /* Total Sales */
    .metric-card.total-sales {
        background-color: var(--purple-light);
    }
    .metric-card.total-sales .metric-value-text,
    .metric-card.total-sales .metric-icon-wrapper {
        color: var(--purple-dark);
    }
    .metric-card.total-sales .metric-icon-wrapper {
        background-color: color-mix(in srgb, var(--purple-light) 80%, white);
    }

    /* Deal Count */
    .metric-card.deal-count {
        background-color: var(--cyan-light);
    }
    .metric-card.deal-count .metric-value-text,
    .metric-card.deal-count .metric-icon-wrapper {
        color: var(--cyan-dark);
    }
    .metric-card.deal-count .metric-icon-wrapper {
        background-color: color-mix(in srgb, var(--cyan-light) 80%, white);
    }

    /* Success Rate */
    .metric-card.success-rate {
        background-color: var(--orange-light);
    }
    .metric-card.success-rate .metric-value-text,
    .metric-card.success-rate .metric-icon-wrapper {
        color: var(--orange-dark);
    }
    .metric-card.success-rate .metric-icon-wrapper {
        background-color: color-mix(in srgb, var(--orange-light) 80%, white);
    }

    /* Deal Won */
    .metric-card.deal-won {
        background-color: var(--success-light);
    }
    .metric-card.deal-won .metric-value-text,
    .metric-card.deal-won .metric-icon-wrapper {
        color: var(--success-dark);
    }
    .metric-card.deal-won .metric-icon-wrapper {
        background-color: color-mix(in srgb, var(--success-light) 80%, white);
    }

    /* Deal Lost */
    .metric-card.deal-lost {
        background-color: var(--danger-light);
    }
    .metric-card.deal-lost .metric-value-text,
    .metric-card.deal-lost .metric-icon-wrapper {
        color: var(--danger-dark);
    }
    .metric-card.deal-lost .metric-icon-wrapper {
        background-color: color-mix(in srgb, var(--danger-light) 80%, white);
    }


    .card-body.text-center h3 { /* Existing style for other cards */
        font-size: 1.75rem;
        color: var(--primary-color); /* Changed to primary color */
    }

    .card-body.text-center h6 { /* Existing style for other cards */
        font-size: 1rem;
        margin-bottom: 0.25rem;
        color: var(--text-medium);
    }

    .table {
        border-radius: var(--border-radius-md);
        overflow: hidden;
        background-color: var(--card-bg);
        box-shadow: 0 2px 10px rgba(0,0,0,0.04);
    }

        .table th, .table td {
            vertical-align: middle;
            padding: 0.9rem 1rem; /* Slightly more padding */
        }

    .table-dark th {
        background-color: #334155; /* Darker, modern grey for table header */
        color: #fff;
    }

    /* Kanban board column and card styles */
    .task-column-container { /* This is the parent card around the task columns */
        border-radius: var(--border-radius-lg);
        box-shadow: 0 6px 18px var(--card-shadow);
        background-color: var(--card-bg); /* Default white background for the entire section */
        border: none;
        padding: 1rem; /* Padding inside the container card */
    }

    /* Styles for the task columns themselves */
    .task-column {
        border-radius: var(--border-radius-lg); /* Rounded corners for the colored column background */
        padding: 1rem; /* Padding inside the colored column area */
        height: auto; /* Ensure columns take full height */
        box-shadow: inset 0 0 5px rgba(0,0,0,0.05); /* Subtle inner shadow for depth */
    }

    /* Styles for individual task cards within the columns */
    .task-column .card {
        border-left: 5px solid; /* Will be overridden by specific status colors */
        border-radius: var(--border-radius-md);
        background-color: var(--card-bg); /* Ensure individual task cards are white */
        box-shadow: 0 2px 8px rgba(0,0,0,0.05); /* Lighter shadow for task cards */
        margin-bottom: 1rem; /* Space between task cards */
    }

    /* Not Started Column and Cards */
    .task-column[data-status="Not Started"] {
        background-color: var(--warning-light); /* Light yellow background for the whole column */
    }
    .task-column[data-status="Not Started"] .card {
        border-left-color: var(--warning-dark); /* Darker yellow border for individual cards */
    }
    .task-column[data-status="Not Started"] h5, /* For the column header (e.g., "Not Started") */
    .task-column[data-status="Not Started"] .card-title { /* For individual task card titles */
        color: var(--warning-dark); /* Darker text for titles */
    }

    /* In Progress Column and Cards */
    .task-column[data-status="In Progress"] {
        background-color: var(--info-light); /* Light blue background for the whole column */
    }
    .task-column[data-status="In Progress"] .card {
        border-left-color: var(--info-dark); /* Darker blue border for individual cards */
    }
    .task-column[data-status="In Progress"] h5,
    .task-column[data-status="In Progress"] .card-title {
        color: var(--info-dark); /* Darker text for titles */
    }

    /* Completed Column and Cards */
    .task-column[data-status="Completed"] {
        background-color: var(--success-light); /* Light green background for the whole column */
    }
    .task-column[data-status="Completed"] .card {
        border-left-color: var(--success-dark); /* Darker green border for individual cards */
    }
    .task-column[data-status="Completed"] h5,
    .task-column[data-status="Completed"] .card-title {
        color: var(--success-dark); /* Darker text for titles */
    }

    /* Adjustments for task card content */
    .task-column .card-body {
        padding: 0.75rem 1rem; /* Adjust padding for task cards */
    }

    .task-column .card-title {
        font-size: 1rem;
        font-weight: 600;
        margin-bottom: 0.25rem;
    }

    .task-column .card-text {
        font-size: 0.85rem;
        color: var(--text-medium);
        margin-bottom: 0.5rem;
    }

    .task-column .task-meta {
        font-size: 0.75rem;
        color: var(--text-medium);
    }

        .task-column .task-meta strong {
            font-weight: 500;
        }

    .card .btn-sm {
        padding: 0.3rem 0.6rem; /* Slightly larger small buttons */
        font-size: 0.85rem;
    }

    .btn {
        border-radius: var(--border-radius-md);
        font-weight: 600; /* Bolder button text */
    }

    .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }

        .btn-primary:hover {
            background-color: color-mix(in srgb, var(--primary-color) 80%, black); /* Slightly darker primary on hover */
            border-color: color-mix(in srgb, var(--primary-color) 80%, black);
        }

    .progress {
        height: 1.25rem; /* Taller progress bar */
        border-radius: var(--border-radius-md);
    }

    .progress-bar {
        font-weight: 600;
        background-color: var(--primary-color); /* Use primary color for progress bar */
        color: white; /* Ensure text is visible on colored bar */
    }

    /* Adjustments for the pie chart size */
    #salesPieChart {
        max-height: 200px; /* Make the pie chart smaller */
        width: auto; /* Allow width to adjust */
        margin: auto; /* Center the chart */
    }

</style>

<div class="container py-5">
    <h2 class="mb-4">Dashboard Overview</h2>

    @if (Model.TodayOrOverdueTasks.Any())
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert" id="reminderAlert">
            <strong>Reminder:</strong> You have @Model.TodayOrOverdueTasks.Count task(s) due today or overdue.
            <br />
            @Html.Raw(ViewData["TaskReminder"])
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (role == "Admin")
    {
        <div class="card mb-4">
            <div class="card-header fw-bold">📦 Sales Performance Overview</div>
            <div class="card-body">
                <div class="row g-3">
                    @* Modified Cards for Icons and Text Layout *@
                    <div class="col-md-4">
                        <div class="metric-card target-sales">
                            @* Added target-sales class here *@
                            <div class="metric-card-body">
                                <h6>Target Sales</h6>
                            </div>
                            <div class="metric-value-container">
                                <span class="metric-value-text">@ViewData["TargetSales"]</span>
                                <div class="metric-icon-wrapper"><i class="fas fa-bullseye"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="metric-card total-sales">
                            @* Added total-sales class here *@
                            <div class="metric-card-body">
                                <h6>Total Sales</h6>
                            </div>
                            <div class="metric-value-container">
                                <span class="metric-value-text">@ViewData["TotalSales"]</span>
                                <div class="metric-icon-wrapper"><i class="fas fa-dollar-sign"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="metric-card deal-count">
                            @* Added deal-count class here *@
                            <div class="metric-card-body">
                                <h6>Deal Count</h6>
                            </div>
                            <div class="metric-value-container">
                                <span class="metric-value-text">@ViewData["DealCount"]</span>
                                <div class="metric-icon-wrapper"><i class="fas fa-handshake"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="metric-card success-rate">
                            @* Added success-rate class here *@
                            <div class="metric-card-body">
                                <h6>Success Rate</h6>
                            </div>
                            <div class="metric-value-container">
                                <span class="metric-value-text">@ViewData["SuccessRate"]</span>
                                <div class="metric-icon-wrapper"><i class="fas fa-chart-line"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="metric-card deal-won">
                            @* This one was already correctly identified *@
                            <div class="metric-card-body">
                                <h6>Deal Won</h6>
                            </div>
                            <div class="metric-value-container">
                                <span class="metric-value-text">@ViewData["DealWon"]</span>
                                <div class="metric-icon-wrapper"><i class="fas fa-trophy"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="metric-card deal-lost">
                            @* This one was already correctly identified *@
                            <div class="metric-card-body">
                                <h6>Deal Lost</h6>
                            </div>
                            <div class="metric-value-container">
                                <span class="metric-value-text">@ViewData["DealLost"]</span>
                                <div class="metric-icon-wrapper"><i class="fas fa-times-circle"></i></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header fw-bold">📊 Sales Performance by Sales Agent</div>
            <div class="card-body">
                <div class="row align-items-center">
                    @* Added align-items-center for vertical alignment *@
                    <div class="col-md-6">
                        <canvas id="salesPieChart"></canvas> @* Removed fixed height from canvas tag *@
                    </div>
                    <div class="col-md-6">
                        <div class="table-responsive">
                            <table class="table table-bordered small">
                                <thead class="table-dark">
                                    <tr>
                                        <th>User</th>
                                        <th>Total Sales</th>
                                        <th>Deals</th>
                                        <th>Won</th>
                                        <th>Lost</th>
                                        <th>Success Rate</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in userStats)
                                    {
                                        <tr>
                                            <td>@user.Username</td>
                                            <td>@($"{user.TotalSales:C}")</td>
                                            <td>@user.DealCount</td>
                                            <td>@user.WonCount</td>
                                            <td>@user.LostCount</td>
                                            <td>@($"{user.SuccessRate:F1}%")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <span class="fw-bold">⏰ Tasks & Reminders</span>
                <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#taskModal">
                    <i class="fas fa-plus"></i> Add Task
                </button>
            </div>
            <div class="card-body">
                <div class="row g-3" id="kanbanBoard">
                    @* Changed g-4 to g-3 for consistent spacing *@
                    @foreach (var status in new[] { "Not Started", "In Progress", "Completed" })
                    {
                        <div class="col-md-4">
                            <h5 class="mb-3 text-center">@status</h5>
                            <div class="task-column" data-status="@status"> </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else @* Non-Admin Role *@
    {
        @* Wrapped the metric cards for non-admin in a card component as requested *@
        <div class="card mb-4">
            <div class="card-header fw-bold">📦 Sales Performance Overview</div>
            <div class="card-body">
                <div class="row g-3">
                    @* Modified Cards for Icons and Text Layout for non-admin role *@
                    <div class="col-md-4">
                        <div class="metric-card target-sales">
                            @* Added target-sales class here *@
                            <div class="metric-card-body">
                                <h6>Target Sales</h6>
                            </div>
                            <div class="metric-value-container">
                                <span class="metric-value-text">@ViewData["TargetSales"]</span>
                                <div class="metric-icon-wrapper"><i class="fas fa-bullseye"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="metric-card total-sales">
                            @* Added total-sales class here *@
                            <div class="metric-card-body">
                                <h6>Total Sales</h6>
                            </div>
                            <div class="metric-value-container">
                                <span class="metric-value-text">@ViewData["TotalSales"]</span>
                                <div class="metric-icon-wrapper"><i class="fas fa-dollar-sign"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="metric-card deal-count">
                            @* Added deal-count class here *@
                            <div class="metric-card-body">
                                <h6>Deal Count</h6>
                            </div>
                            <div class="metric-value-container">
                                <span class="metric-value-text">@ViewData["DealCount"]</span>
                                <div class="metric-icon-wrapper"><i class="fas fa-handshake"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="metric-card success-rate">
                            @* Added success-rate class here *@
                            <div class="metric-card-body">
                                <h6>Success Rate</h6>
                            </div>
                            <div class="metric-value-container">
                                <span class="metric-value-text">@ViewData["SuccessRate"]</span>
                                <div class="metric-icon-wrapper"><i class="fas fa-chart-line"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="metric-card deal-won">
                            @* This one was already correctly identified *@
                            <div class="metric-card-body">
                                <h6>Deal Won</h6>
                            </div>
                            <div class="metric-value-container">
                                <span class="metric-value-text">@ViewData["DealWon"]</span>
                                <div class="metric-icon-wrapper"><i class="fas fa-trophy"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="metric-card deal-lost">
                            @* This one was already correctly identified *@
                            <div class="metric-card-body">
                                <h6>Deal Lost</h6>
                            </div>
                            <div class="metric-value-container">
                                <span class="metric-value-text">@ViewData["DealLost"]</span>
                                <div class="metric-icon-wrapper"><i class="fas fa-times-circle"></i></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header fw-bold">🎯 Sales Target Progress</div>
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-baseline mb-2">
                    <div>
                        <h6 class="text-muted mb-0">Current Sales</h6>
                        <h3 class="mb-0 text-primary">@ViewData["TotalSales"]</h3>
                    </div>
                    <div class="text-end">
                        <h6 class="text-muted mb-0">Target Sales</h6>
                        <h3 class="mb-0 text-success">@ViewData["TargetSales"]</h3>
                    </div>
                </div>
                <div class="progress mb-2" style="height: 25px;">
                    <div class="progress-bar progress-bar-striped progress-bar-animated"
                         role="progressbar"
                         style="width: @ViewData["ProgressPercent"]%;"
                         aria-valuenow="@ViewData["ProgressPercent"]"
                         aria-valuemin="0"
                         aria-valuemax="100">
                        <span class="fw-bold">@ViewData["ProgressPercent"]% Achieved</span>
                    </div>
                </div>
                <small class="text-muted">You are @ViewData["ProgressPercent"]% towards your sales target of @ViewData["TargetSales"]!</small>

            </div>
        </div>

        @* Modified section for non-admin Tasks & Reminders *@
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <span class="fw-bold">⏰ Tasks & Reminders</span>
                <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#taskModal">
                    <i class="fas fa-plus"></i> Add Task
                </button>
            </div>
            <div class="card-body">
                <div class="row g-3" id="kanbanBoard">
                    @* Changed g-4 to g-3 for consistent spacing *@
                    @foreach (var status in new[] { "Not Started", "In Progress", "Completed" })
                    {
                        <div class="col-md-4">
                            <h5 class="mb-3 text-center">@status</h5>
                            <div class="task-column" data-status="@status" style="min-height: 300px;"></div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<div class="modal fade" id="taskModal" tabindex="-1" aria-labelledby="taskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form class="modal-content" id="taskForm">
            <div class="modal-header">
                <h5 class="modal-title" id="taskModalLabel">Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="taskId" />
                <div class="mb-2"><label class="form-label">Task Name</label><input type="text" class="form-control" id="taskName" required /></div>
                <div class="mb-2"><label class="form-label">Description</label><textarea class="form-control" id="taskDescription"></textarea></div>
                <div class="mb-2"><label class="form-label">Due Date</label><input type="date" class="form-control" id="dueDate" required /></div>
                <div class="mb-2"><label class="form-label">Status</label><select class="form-select" id="status" required><option value="Not Started">Not Started</option><option value="In Progress">In Progress</option><option value="Completed">Completed</option></select></div>
                <div class="mb-2"><label class="form-label">Contact</label><select class="form-select" id="contactId"><option value="">-- Optional --</option></select></div>
                <div class="mb-2"><label class="form-label">Deal</label><select class="form-select" id="dealId"><option value="">-- Optional --</option></select></div>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-success"><i class="fas fa-save"></i> Save</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    @if (ViewData["Role"]?.ToString() == "Admin" && userStats != null)
    {
        <script>
            const pieLabels = @Html.Raw(JsonConvert.SerializeObject(userStats.Select(u => u.Username)));
            const pieData = @Html.Raw(JsonConvert.SerializeObject(userStats.Select(u => u.TotalSales)));

            new Chart(document.getElementById('salesPieChart'), {
                type: 'pie',
                data: {
                    labels: pieLabels,
                    datasets: [{
                        data: pieData,
                        backgroundColor: [
                            '#4F46E5', /* Using primary color for first slice */
                            '#10B981', /* A vibrant green */
                            '#F59E0B', /* An orange/amber */
                            '#EF4444', /* A red */
                            '#6366F1', /* Another shade of indigo */
                            '#EC4899'  /* Pink */
                        ],
                        borderColor: '#fff',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false, /* Added to allow better size control */
                    plugins: {
                        legend: {
                            position: 'bottom'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const val = context.raw.toLocaleString();
                                    return `${context.label}: RM ${val}`;
                                }
                            }
                        }
                    }
                }
            });
        </script>
    }

    <script>
        const API_BASE = '@Configuration["ApiSettings:BaseUrl"]';


        function formatDate(dateString) {
            const d = new Date(dateString);
            return d.toLocaleDateString("en-MY", { day: '2-digit', month: 'short', year: 'numeric' });
        }

        async function loadTasks() {
            const res = await fetch(`${API_BASE}/api/task/GetAll`, { credentials: 'include' });
            const raw = await res.json();
            const tasks = raw.$values ?? raw;

            const columns = document.querySelectorAll(".task-column");
            columns.forEach(col => col.innerHTML = "");

            tasks.forEach(task => {
                const card = document.createElement("div");
                card.className = "card card-body mb-2 shadow-sm";
                card.setAttribute("draggable", "true");
                card.dataset.id = task.taskID;
                card.innerHTML = `
                    <div><strong>${task.taskName}</strong></div>
                    <div class="text-muted small">${task.taskDescription || ''}</div>
                    <div class="text-muted small">Due: ${formatDate(task.dueDate)}</div>
                    <div class="text-muted small">Contact: ${task.contactName || '-'}</div>
                    <div class="text-muted small">Deal: ${task.dealName || '-'}</div>
                    <div class="mt-2 d-flex justify-content-end gap-2">
                        <button class="btn btn-sm btn-primary" onclick="editTask(${task.taskID})"><i class="fas fa-pen"></i></button>
                        <button class="btn btn-sm btn-danger" onclick="deleteTask(${task.taskID})"><i class="fas fa-trash"></i></button>
                    </div>
                `;
                const col = document.querySelector(`.task-column[data-status="${task.status}"]`);
                if (col) col.appendChild(card);
            });

            makeSortable();
        }

        function makeSortable() {
            document.querySelectorAll(".task-column").forEach(col => {
                new Sortable(col, {
                    group: 'tasks',
                    animation: 150,
                    onEnd: async e => {
                        const newStatus = e.to.dataset.status;
                        const id = e.item.dataset.id;
                        const res = await fetch(`${API_BASE}/api/task/GetById/${id}`, { credentials: 'include' });
                        const task = await res.json();
                        task.status = newStatus;
                        await fetch(`${API_BASE}/api/task/Update/${id}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            credentials: 'include',
                            body: JSON.stringify(task)
                        });
                        loadTasks();
                    }
                });
            });
        }

        async function loadContactsAndDeals() {
            const [contacts, deals] = await Promise.all([
                fetch(`${API_BASE}/api/contact/GetContactsByUserId`, { credentials: 'include' }).then(r => r.json()),
                fetch(`${API_BASE}/api/deal/GetDealByUserId`, { credentials: 'include' }).then(r => r.json())
            ]);

            const contactOpts = (contacts.$values ?? contacts).map(c => `<option value="${c.contactID}">${c.name}</option>`).join('');
            document.getElementById("contactId").innerHTML = `<option value="">-- Optional --</option>${contactOpts}`;

            const dealOpts = (deals.$values ?? deals).map(d => `<option value="${d.dealID}">${d.dealName}</option>`).join('');
            document.getElementById("dealId").innerHTML = `<option value="">-- Optional --</option>${dealOpts}`;
        }

        async function editTask(id) {
            const res = await fetch(`${API_BASE}/api/task/GetById/${id}`, { credentials: 'include' });
            const task = await res.json();

            document.getElementById("taskId").value = task.taskID;
            document.getElementById("taskName").value = task.taskName;
            document.getElementById("taskDescription").value = task.taskDescription;
            document.getElementById("dueDate").value = task.dueDate?.substring(0, 10);
            document.getElementById("status").value = task.status;
            document.getElementById("contactId").value = task.contactID ?? '';
            document.getElementById("dealId").value = task.dealID ?? '';

            new bootstrap.Modal(document.getElementById("taskModal")).show();
        }

        async function deleteTask(id) {
            if (!confirm("Delete this task?")) return;
            await fetch(`${API_BASE}/api/task/Delete/${id}`, {
                method: 'DELETE',
                credentials: 'include'
            });
            loadTasks();
        }

        document.getElementById("taskForm").addEventListener("submit", async e => {
            e.preventDefault();
            const dto = {
                taskID: parseInt(document.getElementById("taskId").value || 0),
                taskName: document.getElementById("taskName").value,
                taskDescription: document.getElementById("taskDescription").value,
                dueDate: document.getElementById("dueDate").value,
                status: document.getElementById("status").value,
                contactID: document.getElementById("contactId").value || null,
                dealID: document.getElementById("dealId").value || null
            };
            const method = dto.taskID > 0 ? 'PUT' : 'POST';
            const url = `${API_BASE}/api/task/${dto.taskID > 0 ? `Update/${dto.taskID}` : 'Create'}`;
            await fetch(url, {
                method,
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify(dto)
            });
        const modalEl = document.getElementById("taskModal");
        const modalInstance = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);

        modalInstance.hide();
        modalEl.classList.remove("show");
        modalEl.style.display = "none";
        modalEl.removeAttribute("aria-modal");
        modalEl.setAttribute("aria-hidden", "true");

        document.querySelector(".modal-backdrop")?.remove();
        document.body.classList.remove("modal-open");
        document.body.style = "";

        e.target.reset();
        loadTasks();

        });

        document.addEventListener("DOMContentLoaded", () => {
            loadTasks();
            loadContactsAndDeals();
        });
    </script>
}