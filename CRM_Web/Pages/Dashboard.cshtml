@page
@model CRM_Web.Pages.Dashboard.DashboardModel
@{
    ViewData["Title"] = "Dashboard";
    Layout = "_Layout";
}
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

<div class="container py-5">
    <h2 class="mb-4">Dashboard Overview</h2>
    @if (Model.TodayOrOverdueTasks.Any())
    {
    <div class="alert alert-warning alert-dismissible fade show" role="alert" id="reminderAlert">
        <strong>Reminder:</strong> You have @Model.TodayOrOverdueTasks.Count task(s) due today or overdue.
        <br />
        @Html.Raw(ViewData["TaskReminder"])
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    }
    @if (ViewData["Role"]?.ToString() == "Admin")
    {
        <h5 class="mb-2">📊 Company Sales Summary</h5>
    }
    

    <!-- Cards -->
    @if (ViewData["Role"]?.ToString() == "Admin" || ViewData["Role"]?.ToString() == "User")
    {
        <div class="row g-3 mb-4">
            <div class="col-md-4"><div class="card card-body text-center"><h6>🎯 Target Sales</h6><h3>@ViewData["TargetSales"]</h3></div></div>
            <div class="col-md-4"><div class="card card-body text-center"><h6>💰 Total Sales</h6><h3>@ViewData["TotalSales"]</h3></div></div>
            <div class="col-md-4"><div class="card card-body text-center"><h6>📊 Deal Count</h6><h3>@ViewData["DealCount"]</h3></div></div>
            <div class="col-md-4"><div class="card card-body text-center"><h6>🏆 Deal Won</h6><h3>@ViewData["DealWon"]</h3></div></div>
            <div class="col-md-4"><div class="card card-body text-center"><h6>❌ Deal Lost</h6><h3>@ViewData["DealLost"]</h3></div></div>
            <div class="col-md-4"><div class="card card-body text-center"><h6>📈 Success Rate</h6><h3>@ViewData["SuccessRate"]</h3></div></div>
        </div>
    }

    @if (ViewData["Role"]?.ToString() == "User")
    {
        <div class="mb-4">
            <h6>📊 Sales Progress</h6>
            <div class="progress">
                <div class="progress-bar bg-success" role="progressbar" style="width: @ViewData["ProgressPercent"]%" aria-valuenow="@ViewData["ProgressPercent"]" aria-valuemin="0" aria-valuemax="100">
                    @ViewData["ProgressPercent"]%
                </div>
            </div>
        </div>
    }
  

    @{
        var userStats = ViewData["GroupedUserKpis"] as List<SharedLibrary.DTOs.SalesPerformanceDto>;
    }
    @if (ViewData["Role"]?.ToString() == "Admin" && userStats != null)
    {
        <h4 class="mt-4">📊 Sales KPIs by User</h4>
        <div class="table-responsive">
            <table class="table table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>User</th>
                        <th>Total Sales</th>
                        <th>Deals</th>
                        <th>Won</th>
                        <th>Lost</th>
                        <th>Success Rate</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in userStats)
                    {
                        <tr>
                            <td>@user.Username</td>
                            <td>@($"{user.TotalSales:C}")</td>
                            <td>@user.DealCount</td>
                            <td>@user.WonCount</td> <!-- ✅ corrected key -->
                            <td>@user.LostCount</td> <!-- ✅ corrected key -->
                            <td>@($"{user.SuccessRate:F1}%")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }




    <!-- Tasks Kanban -->
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h4 class="mb-0">Tasks & Reminders</h4>
        <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#taskModal">
            <i class="fas fa-plus"></i> Add Task
        </button>
    </div>
    <div class="row g-4" id="kanbanBoard">
        @foreach (var status in new[] { "Not Started", "In Progress", "Completed" })
        {
            <div class="col-md-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-light fw-bold">@status</div>
                    <div class="card-body task-column" data-status="@status" style="min-height: 300px;"></div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="taskModal" tabindex="-1" aria-labelledby="taskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form class="modal-content" id="taskForm">
            <div class="modal-header">
                <h5 class="modal-title" id="taskModalLabel">Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="taskId" />
                <div class="mb-2">
                    <label class="form-label">Task Name</label>
                    <input type="text" class="form-control" id="taskName" required />
                </div>
                <div class="mb-2">
                    <label class="form-label">Description</label>
                    <textarea class="form-control" id="taskDescription"></textarea>
                </div>
                <div class="mb-2">
                    <label class="form-label">Due Date</label>
                    <input type="date" class="form-control" id="dueDate" required />
                </div>
                <div class="mb-2">
                    <label class="form-label">Status</label>
                    <select class="form-select" id="status" required>
                        <option value="Not Started">Not Started</option>
                        <option value="In Progress">In Progress</option>
                        <option value="Completed">Completed</option>
                    </select>
                </div>
                <div class="mb-2">
                    <label class="form-label">Contact</label>
                    <select class="form-select" id="contactId">
                        <option value="">-- Optional --</option>
                    </select>
                </div>
                <div class="mb-2">
                    <label class="form-label">Deal</label>
                    <select class="form-select" id="dealId">
                        <option value="">-- Optional --</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-success"><i class="fas fa-save"></i> Save</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script>
        const API_BASE = '@Configuration["ApiSettings:BaseUrl"]';

        function formatDate(dateString) {
            const d = new Date(dateString);
            return d.toLocaleDateString("en-MY", { day: '2-digit', month: 'short', year: 'numeric' });
        }

        async function loadTasks() {
            const res = await fetch(`${API_BASE}/api/task/GetAll`, { credentials: 'include' });
            const raw = await res.json();
            const tasks = raw.$values ?? raw;

            const columns = document.querySelectorAll(".task-column");
            columns.forEach(col => col.innerHTML = "");

            tasks.forEach(task => {
                const card = document.createElement("div");
                card.className = "card card-body mb-2 shadow-sm";
                card.setAttribute("draggable", "true");
                card.dataset.id = task.taskID;
                card.innerHTML = `
                    <div><strong>${task.taskName}</strong></div>
                    <div class="text-muted small">${task.taskDescription || ''}</div>
                    <div class="text-muted small">Due: ${formatDate(task.dueDate)}</div>
                    <div class="text-muted small">Contact: ${task.contact?.name || '-'}</div>
                    <div class="text-muted small">Deal: ${task.deal?.dealName || '-'}</div>
                    <div class="mt-2 d-flex justify-content-end gap-2">
                        <button class="btn btn-sm btn-primary" onclick="editTask(${task.taskID})"><i class="fas fa-pen"></i></button>
                        <button class="btn btn-sm btn-danger" onclick="deleteTask(${task.taskID})"><i class="fas fa-trash"></i></button>
                    </div>
                `;
                const col = document.querySelector(`.task-column[data-status="${task.status}"]`);
                if (col) col.appendChild(card);
            });

            makeSortable();
        }

        function makeSortable() {
            document.querySelectorAll(".task-column").forEach(col => {
                new Sortable(col, {
                    group: 'tasks',
                    animation: 150,
                    onEnd: async e => {
                        const newStatus = e.to.dataset.status;
                        const id = e.item.dataset.id;
                        const res = await fetch(`${API_BASE}/api/task/GetById/${id}`, { credentials: 'include' });
                        const task = await res.json();
                        task.status = newStatus;
                        await fetch(`${API_BASE}/api/task/Update/${id}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            credentials: 'include',
                            body: JSON.stringify(task)
                        });
                        loadTasks();
                    }
                });
            });
        }

        async function loadContactsAndDeals() {
            const [contacts, deals] = await Promise.all([
                fetch(`${API_BASE}/api/contact/GetContactsByUserId`, { credentials: 'include' }).then(r => r.json()),
                fetch(`${API_BASE}/api/deal/GetDealByUserId`, { credentials: 'include' }).then(r => r.json())
            ]);

            const contactOpts = (contacts.$values ?? contacts).map(c => `<option value="${c.contactID}">${c.name}</option>`).join('');
            document.getElementById("contactId").innerHTML = `<option value="">-- Optional --</option>${contactOpts}`;

            const dealOpts = (deals.$values ?? deals).map(d => `<option value="${d.dealID}">${d.dealName}</option>`).join('');
            document.getElementById("dealId").innerHTML = `<option value="">-- Optional --</option>${dealOpts}`;
        }

        async function editTask(id) {
            const res = await fetch(`${API_BASE}/api/task/GetById/${id}`, { credentials: 'include' });
            const task = await res.json();

            document.getElementById("taskId").value = task.taskID;
            document.getElementById("taskName").value = task.taskName;
            document.getElementById("taskDescription").value = task.taskDescription;
            document.getElementById("dueDate").value = task.dueDate?.substring(0, 10);
            document.getElementById("status").value = task.status;
            document.getElementById("contactId").value = task.contactID ?? '';
            document.getElementById("dealId").value = task.dealID ?? '';

            new bootstrap.Modal(document.getElementById("taskModal")).show();
        }

        async function deleteTask(id) {
            if (!confirm("Delete this task?")) return;
            await fetch(`${API_BASE}/api/task/Delete/${id}`, {
                method: 'DELETE',
                credentials: 'include'
            });
            loadTasks();
        }

        document.getElementById("taskForm").addEventListener("submit", async e => {
            e.preventDefault();
            const dto = {
                taskID: parseInt(document.getElementById("taskId").value || 0),
                taskName: document.getElementById("taskName").value,
                taskDescription: document.getElementById("taskDescription").value,
                dueDate: document.getElementById("dueDate").value,
                status: document.getElementById("status").value,
                contactID: document.getElementById("contactId").value || null,
                dealID: document.getElementById("dealId").value || null
            };
            const method = dto.taskID > 0 ? 'PUT' : 'POST';
            const url = `${API_BASE}/api/task/${dto.taskID > 0 ? `Update/${dto.taskID}` : 'Create'}`;
            await fetch(url, {
                method,
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify(dto)
            });
        const modalEl = document.getElementById("taskModal");
        const modalInstance = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);

        modalInstance.hide();
        modalEl.classList.remove("show");
        modalEl.style.display = "none";
        modalEl.removeAttribute("aria-modal");
        modalEl.setAttribute("aria-hidden", "true");

        document.querySelector(".modal-backdrop")?.remove();
        document.body.classList.remove("modal-open");
        document.body.style = "";

        e.target.reset();
        loadTasks();

        });

        document.addEventListener("DOMContentLoaded", () => {
            loadTasks();
            loadContactsAndDeals();
        });
    </script>
}
