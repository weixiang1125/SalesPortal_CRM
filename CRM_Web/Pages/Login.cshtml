@page
@model CRM_Web.Pages.LoginModel
@{
    Layout = null; // optional: no layout for login
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            background-color: #f5f5f5;
            font-family: 'Segoe UI', sans-serif;
        }

        .login-card {
            max-width: 1000px; /* increased from 400 */
            width: 35%;
            padding: 50px 100px; /* more space inside */
            font-size: 1.1rem; /* slightly larger text */
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 8px 24px rgba(0,0,0,0.1);
            margin-left: auto;
            margin-right: auto;
        }

        .login-logo {
            display: block;
            margin: 0 auto 20px;
            height: 60px;
        }

        .form-control::placeholder {
            font-size: 0.9rem;
        }

        .text-link {
            font-size: 0.9rem;
        }

        .login-card .mb-3 {
            margin-bottom: 1.5rem; /* Increased margin between form groups */
        }

        .login-card h4 {
            margin-bottom: 2rem; /* Increased space below the title */
        }

        .login-card input {
            width: 100%; /* Make inputs stretch the full width of the card */
            padding: 10px; /* Increased input padding */
        }

        .login-card button {
            width: 60%; /* Make the button stretch the full width */
            padding: 14px; /* Increased padding for button */
            font-size: 1.1rem; /* Slightly larger button text */
            background-color: #555;
            border: 1px solid #555;
        }

            .login-card button:hover {
                background-color: #333; /* Darker shade of grey on hover */
                border-color: #333; /* Darker border on hover */
            }

        .text-link {
            font-size: 1rem; /* Slightly larger text for the link */
        }

        hr {
            margin: 2rem 0; /* Increased space above and below the horizontal line */
        }
    </style>
</head>
<body>
    <!-- Top Bar -->
    <div class="w-100 py-3 px-4 mb-4" style="background-color:#414141;">
        <div class="container-fluid d-flex justify-content-between align-items-center">
            <img src="/images/SalesPortal_Logo_transparent_Cropped.png" alt="Logo" style="height: 60px; width: auto;" />
        </div>
    </div>

    <div class="d-flex justify-content-center align-items-center" style="min-height: calc(100vh - 100px);">
        <div class="login-card">
            <h4 class="text-center mb-3">Sign In</h4>
            <hr style="border-top: 1px solid #888; margin: 1rem 0;" />

            <form id="loginForm">
                <div class="mb-3">
                    <label>Username</label>
                    <input id="username" name="username" class=" form-control" required placeholder="Enter username" />
                </div>
                <div class="mb-3">
                    <label>Password</label>
                    <input id="password" name="password" class="form-control" type="password" required placeholder="Enter password" />
                </div>
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <a href="#" class="text-link">Forgot Password</a>
                </div>
                <button type="submit" class="btn btn-primary w-100">SIGN IN</button>

                <div id="loginError" class="text-danger mt-3 text-center" style="display: none;"></div>

            </form>

            <div class="text-center mt-3">
                <span class="text-muted">Not a member yet?</span>
                <a href="/Register">Sign Up</a>
            </div>
        </div>
    </div>

    <div id="loginError" class="text-danger mt-3 text-center" style="display: none;"></div>

    <script src="~/js/jwt-decode.js"></script>

</body>
</html>

<script>
           document.getElementById('loginForm').addEventListener('submit', function(event) {
        event.preventDefault();

        fetch('https://localhost:44309/api/Auth/login', {
            method: 'POST',
            credentials: 'include', // Include cookies in the request
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                username: document.getElementById('username').value.trim(),
                password: document.getElementById('password').value.trim()
            })
        })
        .then(async response => {
            console.log("Response status:", response.status);
            const responseText = await response.text(); // Get raw response text
            console.log("Raw response:", responseText);

            if (response.ok) {
                const data = JSON.parse(responseText);  // Safely parse the response
                const token = data.token;

                if (!token) {
                    showError("Invalid login response");
                    return;
                }

                // Decode the JWT token
                const decodedToken = jwtDecode(token);
                console.log(decodedToken);

                const userId = decodedToken["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"];
                const username = decodedToken["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"];
                const role = decodedToken["http://schemas.microsoft.com/ws/2008/06/identity/claims/role"];

                console.log("Logged in as:", username, "Role:", role);

                // Store decoded user data in sessionStorage or localStorage
                sessionStorage.setItem("userId", userId);
                sessionStorage.setItem('username', username);
                sessionStorage.setItem('role', role);

                await fetch("/Login?handler=SetSession", {
                    method: "POST",
                    credentials: "include", // ✅ This line is essential
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        userID: parseInt(userId),
                        username: username,
                        role: role
                    })
                });

                window.location.href = 'https://localhost:44373/Dashboard'; // Redirect to dashboard
            } else {
                const error = responseText ? JSON.parse(responseText) : { message: "Login failed" };
                showError(error.message);
            }
        })
        .catch(error => {
            console.error("Error during fetch:", error);
            showError("Network error");
        });

        // Helper function to show error message
        function showError(message) {
            const el = document.getElementById('loginError');
            el.style.display = 'block';
            el.textContent = message;
        }

        // Logout reason handling (unchanged)
        const reason = sessionStorage.getItem("logoutReason");
        if (reason) showError(reason);
        sessionStorage.removeItem("logoutReason");
    });
</script>
