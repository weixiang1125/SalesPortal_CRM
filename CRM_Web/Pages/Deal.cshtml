@page
@model CRM_Web.Pages.Deals.DealModelPage
@{
    ViewData["Title"] = "Deals";
}
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
<style>
    .kanban-column {
        min-height: 300px;
        background-color: #f8f9fa; /* Light background for columns */
        border-radius: 0.3rem; /* Match Bootstrap card border-radius */
        padding: 1rem;
        transition: background-color 0.2s ease; /* Smooth transition */
    }

        .kanban-column.sortable-chosen {
            background-color: #e9ecef; /* Feedback when dragging over */
        }

    .deal-card {
        background-color: #ffffff;
        border: 1px solid #dee2e6; /* Softer border */
        border-radius: 0.5rem; /* Slightly more rounded corners */
        padding: 1rem;
        margin-bottom: 0.75rem; /* Increased spacing between cards */
        cursor: grab;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075); /* Subtle shadow */
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out; /* Smooth hover effect */
        position: relative; /* For potential badges/icons */
    }

        .deal-card:hover {
            transform: translateY(-3px); /* Lift effect on hover */
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15); /* More pronounced shadow */
        }

        .deal-card strong {
            font-size: 1.1rem;
            color: #343a40; /* Darker text for emphasis */
            display: block; /* Ensure it takes full width */
            margin-bottom: 0.5rem;
        }

        .deal-card p {
            font-size: 0.9rem;
            color: #6c757d; /* Muted text for details */
            line-height: 1.3;
        }

        /* Optional: Add a small badge for status or value */
        .deal-card .deal-value {
            font-weight: bold;
            color: #007bff; /* Primary blue for value */
        }

    /* Styles for the drag ghost (Sortable.js) */
    .sortable-ghost {
        opacity: 0.4;
        background-color: #f0f0f0;
        border: 1px dashed #ced4da;
    }

    /* Header styling for Kanban columns */
    .card-header {
        border-bottom: 1px solid rgba(0,0,0,.125); /* Default Bootstrap border */
        background-color: #343a40; /* Darker header */
        color: white;
        padding: 0.75rem 1.25rem;
        font-weight: 600;
        font-size: 1.1rem;
        border-top-left-radius: calc(0.5rem - 1px); /* Match new card border-radius */
        border-top-right-radius: calc(0.5rem - 1px);
    }

    /* Adjust the min-height if needed for columns */
    .kanban-column {
        min-height: 400px; /* Give more visual space */
    }
</style>
<h2 class="mb-4">Deals</h2>

<div class="mb-3">
    <button class="btn btn-primary" id="btnCreateDeal">
        <i class="fas fa-plus"></i> Create Deal
    </button>

</div>

<div class="mb-3">
    <button id="toggleViewBtn" class="btn btn-secondary">
        <i class="fas fa-columns"></i> Switch to Kanban View
    </button>
</div>

<div id="tableView">
    <table id="dealsTable" class="table table-bordered table-striped">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>Deal Name</th>
                <th>Value</th>
                <th>Stage</th>
                <th>Status</th>
                <th>Expected Close</th>
                <th class="admin-column">Created Date</th>
                <th class="admin-column">Created By</th>
                <th class="admin-column">Updated Date</th>
                <th class="admin-column">Updated By</th>
                <th>Contact</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="dealsTableBody"></tbody>
    </table>
</div>

<div id="kanbanView" class="row g-4" style="display: none;">
    @foreach (var stage in new[] { "Prospecting", "Negotiation", "Closed-Won", "Closed-Lost" })
    {
            <div class="col-md-3">
                <div class="card border-dark shadow-sm h-100">
                    <div class="card-header bg-dark text-white">
                        <strong>@stage</strong>
                    </div>
                    <div class="card-body kanban-column" data-stage="@stage" style="min-height: 300px;"></div>
                </div>
            </div>
    }
</div>
<!-- Create Deal Modal -->
<div class="modal fade" id="createDealModal" tabindex="-1" aria-labelledby="createDealModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="createDealForm">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Deal</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body row g-3">
                    <div class="col-6">
                        <label class="form-label">Deal Name</label>
                        <input class="form-control" id="DealName" />
                    </div>
                    <div class="col-6">
                        <label class="form-label">Value</label>
                        <input class="form-control" id="Value" type="number" />
                    </div>
                    <div class="col-6">
                        <label class="form-label">Stage</label>
                        <select class="form-select" id="Stage" required>
                            <option value="Prospecting">Prospecting</option>
                            <option value="Negotiation">Negotiation</option>
                            <option value="Closed-Won">Closed-Won</option>
                            <option value="Closed-Lost">Closed-Lost</option>
                        </select>
                    </div>
                    <div class="col-6">
                        <label class="form-label">Status</label>
                        <select class="form-select" id="Status" required>
                            <option value="Active">Active</option>
                            <option value="Inactive">Inactive</option>
                        </select>
                    </div>
                    <div class="col-6">
                        <label class="form-label">Expected Close Date</label>
                        <input class="form-control" id="ExpectedCloseDate" type="date" />
                    </div>
                    <div class="col-6">
                        <label class="form-label">Contact</label>
                        <select class="form-select" id="ContactID"></select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Deal Modal -->
<div class="modal fade" id="editDealModal" tabindex="-1" aria-labelledby="editDealModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="editDealForm">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Deal</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body row g-3">
                    <input type="hidden" id="DealID" />
                    <div class="col-6">
                        <label class="form-label">Deal Name</label>
                        <input class="form-control" id="EditDealName" />
                    </div>
                    <div class="col-6">
                        <label class="form-label">Value</label>
                        <input class="form-control" id="EditValue" type="number" />
                    </div>
                    <div class="col-6">
                        <label class="form-label">Stage</label>
                        <select class="form-select" id="EditStage" required>
                            <option value="Prospecting">Prospecting</option>
                            <option value="Negotiation">Negotiation</option>
                            <option value="Closed-Won">Closed-Won</option>
                            <option value="Closed-Lost">Closed-Lost</option>
                        </select>
                    </div>
                    <div class="col-6">
                        <label class="form-label">Status</label>
                        <select class="form-select" id="EditStatus" required>
                            <option value="Active">Active</option>
                            <option value="Inactive">Inactive</option>
                        </select>
                    </div>
                    <div class="col-6">
                        <label class="form-label">Expected Close Date</label>
                        <input class="form-control" id="EditExpectedCloseDate" type="date" />
                    </div>
                    <div class="col-6">
                        <label class="form-label">Contact</label>
                        <select class="form-select" id="EditContactID"></select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="taskModal" tabindex="-1" aria-labelledby="taskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form class="modal-content" id="taskForm">
            <div class="modal-header">
                <h5 class="modal-title" id="taskModalLabel">Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-2 text-muted small" id="taskContextLabel"></div>
                <input type="hidden" id="taskId" />
                <div class="mb-2"><label class="form-label">Task Name</label><input type="text" class="form-control" id="taskName" required /></div>
                <div class="mb-2"><label class="form-label">Description</label><textarea class="form-control" id="taskDescription"></textarea></div>
                <div class="mb-2"><label class="form-label">Due Date</label><input type="date" class="form-control" id="dueDate" required /></div>
                <div class="mb-2"><label class="form-label">Status</label><select class="form-select" id="status" required><option value="Not Started">Not Started</option><option value="In Progress">In Progress</option><option value="Completed">Completed</option></select></div>
                <div class="mb-2"><label class="form-label">Contact</label><select class="form-select" id="contactId"><option value="">-- Optional --</option></select></div>
                <div class="mb-2"><label class="form-label">Deal</label><select class="form-select" id="dealId"><option value="">-- Optional --</option></select></div>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-success"><i class="fas fa-save"></i> Save</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </form>
    </div>
</div>
@section Styles {
        <link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap5.min.css" />
        <style>
            .deal-card {
                background-color: white;
                border: 1px solid #ccc;
                border-radius: 4px;
                padding: 8px;
                margin-bottom: 8px;
                cursor: grab;
            }
        </style>
}

@section Scripts {
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
        <script>
            window.bootstrap = bootstrap; // ✅ Fix: ensure Modal APIs are available globally
        </script>

        <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
        <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
        <script src="https://cdn.datatables.net/1.13.4/js/dataTables.bootstrap5.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

        <script>
            const API_BASE = '@Configuration["ApiSettings:BaseUrl"]';

                async function loadContactsAndDeals() {
            const [contacts, deals] = await Promise.all([
                fetch(`${API_BASE}/api/contact/GetContactsByUserId`, { credentials: 'include' }).then(r => r.json()),
                fetch(`${API_BASE}/api/deal/GetDealByUserId`, { credentials: 'include' }).then(r => r.json())
            ]);

            const contactOpts = (contacts.$values ?? contacts).map(c => `<option value="${c.contactID}">${c.name}</option>`).join('');
            document.getElementById("contactId").innerHTML = `<option value="">-- Optional --</option>${contactOpts}`;

            const dealOpts = (deals.$values ?? deals).map(d => `<option value="${d.dealID}">${d.dealName}</option>`).join('');
            document.getElementById("dealId").innerHTML = `<option value="">-- Optional --</option>${dealOpts}`;
        }

        async function createOrUpdateTask(e) {
            e.preventDefault();

            const dto = {
                taskID: parseInt(document.getElementById("taskId").value || 0),
                taskName: document.getElementById("taskName").value,
                taskDescription: document.getElementById("taskDescription").value,
                dueDate: document.getElementById("dueDate").value,
                status: document.getElementById("status").value,
                contactID: document.getElementById("contactId").value || null,
                dealID: document.getElementById("dealId").value || null
            };

            const method = dto.taskID > 0 ? 'PUT' : 'POST';
            const url = `${API_BASE}/api/task/${dto.taskID > 0 ? `Update/${dto.taskID}` : 'Create'}`;

            await fetch(url, {
                method,
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify(dto)
            });

             //  Full cleanup to prevent overlay/focus freeze
            const modalEl = document.getElementById("taskModal");
            const modalInstance = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);
            modalInstance.hide();

            // Manually remove leftover classes and backdrop if stuck
            document.body.classList.remove("modal-open");
            modalEl.classList.remove("show");
            modalEl.style.display = "none";
            modalEl.removeAttribute("aria-modal");
            modalEl.setAttribute("aria-hidden", "true");
            document.querySelectorAll(".modal-backdrop").forEach(el => el.remove());

            e.target.reset();
        }



        document.getElementById("taskForm").addEventListener("submit", createOrUpdateTask);

            async function loadContacts() {
                try {
                    const res = await fetch(`${API_BASE}/api/Contact/GetContactsByUserId`, { credentials: 'include' });
                    const data = await res.json();
                    const contacts = data.$values ?? data;
                    const options = contacts.map(c => `<option value="${c.contactID}">${c.name}</option>`).join('');
                    $("#ContactID, #EditContactID").html(`<option value="">-- Select Contact --</option>` + options);
                } catch (err) {
                    console.error("Failed to load contacts", err);
                }
            }

            function formatDate(dateStr) {
                if (!dateStr) return '';
                const d = new Date(dateStr);
                return d.toLocaleString('en-MY', {
                    year: 'numeric', month: '2-digit', day: '2-digit',
                    hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false
                });
            }

            function loadDeals() {
                $.ajax({
                    url: `${API_BASE}/api/Deal/GetDealByUserId`,
                    method: 'GET',
                    xhrFields: { withCredentials: true },
                    success: res => {
                        const list = res.$values ?? res;
                        populateTableView(list);
                        populateKanban(list);
                    },
                    error: () => alert("Failed to load deals")
                });
            }

            $('#btnCreateDeal').click(() => {
                const modal = new bootstrap.Modal(document.getElementById('createDealModal'));
                modal.show();
            });

                    function populateTableView(deals) {
                const table = $('#dealsTable');

                if ($.fn.DataTable.isDataTable(table)) {
                    table.DataTable().clear().destroy();  // 🔁 Clean it
                }

                const tbody = $('#dealsTableBody').empty();

                deals.forEach((d, i) => {
                    const row = `<tr>
                        <td>${i + 1}</td>
                        <td>${d.dealName}</td>
                        <td>${d.value?.toLocaleString('en-MY', { style: 'currency', currency: 'MYR' }) ?? '-'}</td>
                        <td>${d.stage}</td>
                        <td>${d.status}</td>
                        <td>${formatDate(d.expectedCloseDate)}</td>
                        <td class="admin-column">${formatDate(d.createdDate)}</td>
                        <td class="admin-column">${d.createdByUsername ?? ''}</td>
                        <td class="admin-column">${formatDate(d.updatedDate)}</td>
                        <td class="admin-column">${d.updatedByUsername ?? ''}</td>
                        <td>${d.contactName}</td>
                        <td>
                             <button class="btn btn-sm btn-secondary btn-add-task"
                                data-contactid="${d.contactID}" data-contactname="${d.contactName}" data-dealid="${d.dealID}" data-dealname="${d.dealName}"
                                data-bs-toggle="modal" data-bs-target="#taskModal">
                                <i class="fas fa-tasks"></i>
                            </button>

                            <button class="btn btn-sm btn-primary btn-edit" data-id="${d.dealID}"><i class="fas fa-edit"></i></button>
                            <button class="btn btn-sm btn-danger" onclick="confirmDelete('${d.dealID}')"><i class="fas fa-trash"></i></button>
                        </td>
                    </tr>`;
                    tbody.append(row);
                });

                // ✅ Fix: Add autoWidth: false and redraw
                const dt = table.DataTable({
                    destroy: true,
                    autoWidth: false,
                    paging: true,
                    searching: true,
                    lengthChange: true,
                    pageLength: 10,
                    lengthMenu: [5, 10, 25, 50, 100],
                    columnDefs: [
                        {
                            targets: 0, // index
                            orderable: false,
                            searchable: false
                        }
                    ],
                    order: [[1, 'asc']],
                    drawCallback: function (settings) {
                        const api = this.api();
                        api.column(0, { page: 'current' }).nodes().each(function (cell, i) {
                            cell.innerHTML = i + 1;
                        });
                    }
                });

                dt.columns.adjust().draw(); // ✅ Ensures the layout corrects itself

                if (sessionStorage.getItem("role") !== "Admin") {
                    $(".admin-column").hide();
                }
            }



            function populateKanban(deals) {
                const stages = ['Prospecting', 'Negotiation', 'Closed-Won', 'Closed-Lost'];
                stages.forEach(stage => {
                    const col = $(`.kanban-column[data-stage='${stage}']`).empty();
                    deals.filter(d => d.stage === stage).forEach(d => {
                        const card = $(`<div class="deal-card" data-id="${d.dealID}">
                            <strong>${d.dealName}</strong>
                            <p class="mb-1">Value: ${d.value?.toLocaleString('en-MY', { style: 'currency', currency: 'MYR' }) ?? '-'}</p>
                            <p class="mb-1">${d.contactName}</p>
                        </div>`);
                        col.append(card);
                    });

                    new Sortable(col[0], {
                        group: 'deals',
                        animation: 150,
                            onEnd: function (evt) {
                            const dealId = $(evt.item).data('id');
                            const newStage = $(evt.to).data('stage');

                            // Get full deal object first
                            $.ajax({
                                url: `${API_BASE}/api/Deal/GetDealById/${dealId}`,
                                method: 'GET',
                                xhrFields: { withCredentials: true },
                                success: function (deal) {
                                    const updated = {
                                        dealID: deal.dealID,
                                        dealName: deal.dealName,
                                        value: deal.value,
                                        stage: newStage, // 🔁 update stage
                                        status: deal.status,
                                        expectedCloseDate: deal.expectedCloseDate,
                                        contactID: deal.contactID,
                                        updatedBy: sessionStorage.getItem("userId") // ✅ required by backend
                                    };

                                    $.ajax({
                                        url: `${API_BASE}/api/Deal/UpdateStage/${dealId}`,
                                        type: 'PUT',
                                        contentType: 'application/json',
                                        data: JSON.stringify(updated),
                                        xhrFields: { withCredentials: true },
                                        success: () => loadDeals(),
                                        error: () => alert("Failed to update stage")
                                    });
                                },
                                error: () => alert("Failed to fetch deal for stage update")
                            });
                        }

                    });
                });
            }

            function confirmDelete(dealId) {
                if (!confirm("Delete this deal?")) return;
                $.ajax({
                    url: `${API_BASE}/api/Deal/DeleteDealById/${dealId}`,
                    type: 'DELETE',
                    xhrFields: { withCredentials: true },
                    success: () => loadDeals(),
                    error: () => alert("Failed to delete deal.")
                });
            }

            $(function () {
                loadContacts();
                loadDeals();

                $('#toggleViewBtn').click(() => {
                    $('#tableView').toggle();
                    $('#kanbanView').toggle();
                    $('#toggleViewBtn i').toggleClass('fa-columns fa-table');
                    $('#toggleViewBtn').text($('#kanbanView').is(':visible') ? ' Switch to Table View' : ' Switch to Kanban View').prepend($('#toggleViewBtn i'));
                });

                $('#createDealForm').submit(function (e) {
                    e.preventDefault();
                    const formData = {
                        DealName: $('#DealName').val(),
                        Value: parseFloat($('#Value').val()),
                        Stage: $('#Stage').val(),
                        Status: $('#Status').val(),
                        ExpectedCloseDate: $('#ExpectedCloseDate').val() || null,
                        ContactID: $('#ContactID').val()
                    };
                    $.ajax({
                        url: `${API_BASE}/api/Deal/CreateDeal`,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(formData),
                        xhrFields: { withCredentials: true },
                        success: () => {
                            const modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('createDealModal'));
                            modal.hide();
                            loadDeals();
                        },
                        error: () => alert("Create failed")
                    });
                });

                $('#editDealForm').submit(function (e) {
                    e.preventDefault();
                    const formData = {
                        DealID: $('#DealID').val(),
                        DealName: $('#EditDealName').val(),
                        Value: parseFloat($('#EditValue').val()),
                        Stage: $('#EditStage').val(),
                        Status: $('#EditStatus').val(),
                        ExpectedCloseDate: $('#EditExpectedCloseDate').val() || null,
                        ContactID: $('#EditContactID').val(),
                        UpdatedBy: sessionStorage.getItem("userId")
                    };
                    $.ajax({
                        url: `${API_BASE}/api/Deal/UpdateDealById/${formData.DealID}`,
                        type: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify(formData),
                        xhrFields: { withCredentials: true },
                        success: () => {
                            const modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('editDealModal'));
                            modal.hide();
                            loadDeals();
                        },
                        error: () => alert("Edit failed")
                    });
                });

                $(document).on('click', '.btn-edit', function () {
                    const id = $(this).data('id');
                    $.ajax({
                        url: `${API_BASE}/api/Deal/GetDealById/${id}`,
                        method: 'GET',
                        xhrFields: { withCredentials: true },
                        success: async function (deal) {
                            await loadContacts();
                            $('#DealID').val(deal.dealID);
                            $('#EditDealName').val(deal.dealName);
                            $('#EditValue').val(deal.value);
                            $('#EditStage').val(deal.stage);
                            $('#EditStatus').val(deal.status);
                            $('#EditExpectedCloseDate').val(deal.expectedCloseDate?.split('T')[0] || '');
                            $('#EditContactID').val(deal.contactID);

                            // ✅ Show the modal manually
                            const modal = new bootstrap.Modal(document.getElementById('editDealModal'));
                            modal.show();
                        },
                        error: () => alert("Failed to load deal")
                    });
                });

                $(document).on("click", ".btn-add-task", function () {
                    const dealId = $(this).data("dealid");
                    const contactId = $(this).data("contactid");
                    const dealName = $(this).data("dealname") || "";
                    const contactName = $(this).data("contactname") || "";

                    $("#taskContextLabel").text(`Creating task for: ${dealName || contactName}`);
                    $("#dealId").val(""); // clear first
                    $("#contactId").val("");

                    // Load dropdowns, then set value after a delay
                    loadContactsAndDeals().then(() => {
                        if (dealId) $("#dealId").val(dealId);
                        if (contactId) $("#contactId").val(contactId);
                    });
                });


            });
        </script>
}

